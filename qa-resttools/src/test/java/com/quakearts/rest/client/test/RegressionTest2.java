package com.quakearts.rest.client.test;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getExpected();
        com.quakearts.rest.client.net.ProgressSource.State state14 = progressEvent12.getState();
        java.lang.Object obj15 = progressEvent12.getSource();
        java.lang.Object obj16 = progressEvent12.getSource();
        java.lang.Object obj17 = progressEvent12.getSource();
        java.net.URL uRL18 = progressEvent12.getURL();
        java.lang.String str19 = progressEvent12.getContentType();
        java.lang.Object obj20 = progressEvent12.getSource();
        long long21 = progressEvent12.getExpected();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(state14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(uRL18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str19, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
//        boolean boolean14 = httpURLConnectionImpl5.getUseCaches();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputStream13);
//        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setDoOutput(true);
        boolean boolean8 = httpsURLConnectionImpl3.getAllowUserInteraction();
        long long9 = httpsURLConnectionImpl3.getIfModifiedSince();
        httpsURLConnectionImpl3.setInstanceFollowRedirects(true);
//        boolean boolean12 = httpsURLConnectionImpl3.getUseCaches();
        httpsURLConnectionImpl3.setUseCaches(true);
        java.lang.String str15 = httpsURLConnectionImpl3.getRequestMethod();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
//        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderField((int) (short) 10);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getExpected();
        com.quakearts.rest.client.net.ProgressSource.State state14 = progressEvent12.getState();
        java.net.URL uRL15 = progressEvent12.getURL();
        java.lang.String str16 = progressEvent12.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(state14);
        org.junit.Assert.assertNull(uRL15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]" + "'", str16, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpCapture httpCapture42 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream43 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) meteredStream10, httpCapture42);
        java.net.URL uRL44 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource46 = new com.quakearts.rest.client.net.ProgressSource(uRL44, "");
        progressSource46.close();
        progressSource46.close();
        com.quakearts.rest.client.net.MeteredStream meteredStream50 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource46, (long) 501);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = meteredStream10.skip((long) 400);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setUseCaches(false);
        boolean boolean8 = httpsURLConnectionImpl3.getDoOutput();
//        boolean boolean9 = httpsURLConnectionImpl3.getDefaultUseCaches();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = httpsURLConnectionImpl3.getCipherSuite();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: connection not yet open");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
//        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setConnectTimeout((int) ' ');
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.disconnect();
        java.lang.String str13 = httpsURLConnectionImpl6.getRequestMethod();
        // The following exception was thrown during execution in test generation
        try {
            java.security.Principal principal14 = httpsURLConnectionImpl6.getPeerPrincipal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: connection not yet open");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream3 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream3.reset();
        posterOutputStream3.flush();
        posterOutputStream3.write(8192);
        posterOutputStream3.reset();
        byte[] byteArray9 = posterOutputStream3.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            posterOutputStream0.write(byteArray9, 8192, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        int int9 = httpsURLConnectionImpl3.getConnectTimeout();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = httpsURLConnectionImpl3.getHeaderFields();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
//        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = httpsURLConnectionImpl3.getHeaderField("content/unknown");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
//        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(uRL9);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setDoOutput(true);
        boolean boolean8 = httpsURLConnectionImpl3.getAllowUserInteraction();
        long long9 = httpsURLConnectionImpl3.getIfModifiedSince();
        httpsURLConnectionImpl3.setInstanceFollowRedirects(true);
//        boolean boolean12 = httpsURLConnectionImpl3.getUseCaches();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = httpsURLConnectionImpl3.getContentType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
//        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        long long6 = httpsURLConnectionImpl3.getIfModifiedSince();
        java.io.InputStream inputStream7 = httpsURLConnectionImpl3.getErrorStream();
        java.net.URL uRL8 = null;
        java.net.Proxy proxy9 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler12 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl13 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL8, proxy9, httpHandler12);
        int int14 = httpURLConnectionImpl13.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState15 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl13.setTunnelState(tunnelState15);
        boolean boolean17 = httpURLConnectionImpl13.streaming();
        boolean boolean18 = httpURLConnectionImpl13.streaming();
        java.lang.Class<?> wildcardClass19 = httpURLConnectionImpl13.getClass();
        java.net.URL uRL20 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource22 = new com.quakearts.rest.client.net.ProgressSource(uRL20, "");
        boolean boolean23 = progressSource22.connected();
        progressSource22.beginTracking();
        java.lang.Class<?> wildcardClass25 = progressSource22.getClass();
        java.net.URL uRL26 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource28 = new com.quakearts.rest.client.net.ProgressSource(uRL26, "");
        boolean boolean29 = progressSource28.connected();
        progressSource28.beginTracking();
        java.lang.Class<?> wildcardClass31 = progressSource28.getClass();
        java.net.URL uRL32 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource34 = new com.quakearts.rest.client.net.ProgressSource(uRL32, "");
        boolean boolean35 = progressSource34.connected();
        progressSource34.beginTracking();
        java.lang.Class<?> wildcardClass37 = progressSource34.getClass();
        java.net.URL uRL38 = null;
        java.net.Proxy proxy39 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler40 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl41 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL38, proxy39, httpsHandler40);
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = httpsURLConnectionImpl41.getHostnameVerifier();
        httpsURLConnectionImpl41.setAllowUserInteraction(false);
//        boolean boolean45 = httpsURLConnectionImpl41.getDefaultUseCaches();
        httpsURLConnectionImpl41.disconnect();
        java.net.URL uRL47 = httpsURLConnectionImpl41.getURL();
        java.lang.Class<?> wildcardClass48 = httpsURLConnectionImpl41.getClass();
        java.lang.Class[] classArray49 = new java.lang.Class[] { wildcardClass19, wildcardClass25, wildcardClass31, wildcardClass37, wildcardClass48 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = httpsURLConnectionImpl3.getContent(classArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(inputStream7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState15 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState15.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(hostnameVerifier42);
//        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(uRL47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classArray49);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        posterOutputStream0.write(200);
        posterOutputStream0.flush();
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.disconnect();
        int int8 = httpsURLConnectionImpl3.getConnectTimeout();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode((int) (byte) 10);
        java.lang.String str12 = httpsURLConnectionImpl3.getRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        // The following exception was thrown during execution in test generation
        try {
            java.security.Permission permission13 = httpsURLConnectionImpl3.getPermission();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setReadTimeout(503);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setRequestProperty("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal character(s) in message header field: com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        httpsURLConnectionImpl3.setReadTimeout(10);
        httpsURLConnectionImpl3.setDoOutput(true);
        httpsURLConnectionImpl3.setReadTimeout(402);
        httpsURLConnectionImpl3.setDoInput(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = httpsURLConnectionImpl3.getHostnameVerifier();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        int int11 = httpURLConnectionImpl5.getReadTimeout();
        java.lang.String str13 = httpURLConnectionImpl5.getRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = httpURLConnectionImpl5.getHeaderField("{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        httpURLConnectionImpl5.setAuthenticationProperty("{}", "{}");
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.connect();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        java.lang.String str18 = httpsURLConnectionImpl5.getHeaderField(1);
        boolean boolean19 = httpsURLConnectionImpl5.getAllowUserInteraction();
        int int22 = httpsURLConnectionImpl5.getHeaderFieldInt("{size=10 nkeys=1  {hi!} }", (int) (byte) 10);
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        java.lang.Object obj13 = progressEvent12.getSource();
        java.lang.String str14 = progressEvent12.toString();
        java.lang.String str15 = progressEvent12.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]" + "'", str14, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]" + "'", str15, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.disconnect();
        int int8 = httpsURLConnectionImpl3.getConnectTimeout();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 403);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = httpsURLConnectionImpl3.getHeaderFieldDate("content/unknown", (long) 201);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        int int12 = httpsURLConnectionImpl3.getHeaderFieldInt("GET", 403);
        java.lang.String str14 = httpsURLConnectionImpl3.getHeaderFieldKey((int) (short) 0);
        java.lang.String str16 = httpsURLConnectionImpl3.getHeaderField(0);
        int int19 = httpsURLConnectionImpl3.getHeaderFieldInt("content/unknown", 0);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 403 + "'", int12 == 403);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
//        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        httpsURLConnectionImpl3.setConnectTimeout(501);
        httpsURLConnectionImpl3.setChunkedStreamingMode(501);
        httpsURLConnectionImpl3.setUseCaches(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = null;
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setSSLSocketFactory(sSLSocketFactory17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: no SSLSocketFactory specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
//        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long14 = httpsURLConnectionImpl6.getHeaderFieldDate("", (long) 52);
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        com.quakearts.rest.client.net.KeepAliveCache keepAliveCache0 = new com.quakearts.rest.client.net.KeepAliveCache();
        java.util.Optional<com.quakearts.rest.client.net.RegisteredDomainProducer.RegisteredDomain> registeredDomainOptional2 = com.quakearts.rest.client.net.RegisteredDomainProducer.RegisteredDomain.from("");
        boolean boolean3 = keepAliveCache0.equals((java.lang.Object) registeredDomainOptional2);
        com.quakearts.rest.client.net.MessageHeader messageHeader4 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str6 = messageHeader4.getValue(503);
        messageHeader4.add("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.util.Iterator<java.lang.String> strItor11 = messageHeader4.multiValueIterator("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        boolean boolean12 = keepAliveCache0.containsValue((java.lang.Object) "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor13 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL14 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource16 = new com.quakearts.rest.client.net.ProgressSource(uRL14, "");
        long long17 = progressSource16.getExpected();
        progressMonitor13.registerSource(progressSource16);
        java.lang.String str19 = progressSource16.toString();
        java.net.URL uRL20 = null;
        java.net.URL uRL23 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource25 = new com.quakearts.rest.client.net.ProgressSource(uRL23, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.net.URL uRL26 = null;
        com.quakearts.rest.client.net.ProgressSource.State state29 = com.quakearts.rest.client.net.ProgressSource.State.UPDATE;
        com.quakearts.rest.client.net.ProgressEvent progressEvent32 = new com.quakearts.rest.client.net.ProgressEvent(progressSource25, uRL26, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state29, (long) 501, (long) 304);
        java.net.URL uRL33 = null;
        com.quakearts.rest.client.net.ProgressSource.State state36 = com.quakearts.rest.client.net.ProgressSource.State.NEW;
        com.quakearts.rest.client.net.ProgressEvent progressEvent39 = new com.quakearts.rest.client.net.ProgressEvent(progressSource25, uRL33, "hi!", "GET", state36, 1L, (long) 408);
        com.quakearts.rest.client.net.ProgressEvent progressEvent42 = new com.quakearts.rest.client.net.ProgressEvent(progressSource16, uRL20, "content/unknown", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state36, (long) 504, (long) (byte) 100);
        java.net.URL uRL43 = null;
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor46 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int47 = progressMonitor46.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor48 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL49 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource51 = new com.quakearts.rest.client.net.ProgressSource(uRL49, "");
        long long52 = progressSource51.getExpected();
        progressMonitor48.registerSource(progressSource51);
        progressMonitor46.unregisterSource(progressSource51);
        com.quakearts.rest.client.net.ProgressListener progressListener55 = null;
        progressMonitor46.removeProgressListener(progressListener55);
        java.io.InputStream inputStream57 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture58 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream59 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream57, httpCapture58);
        com.quakearts.rest.client.net.HttpCapture httpCapture60 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream61 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream57, httpCapture60);
        java.net.URL uRL62 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource64 = new com.quakearts.rest.client.net.ProgressSource(uRL62, "");
        long long65 = progressSource64.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream67 = new com.quakearts.rest.client.net.MeteredStream(inputStream57, progressSource64, (long) (byte) 1);
        progressMonitor46.updateProgress(progressSource64);
        com.quakearts.rest.client.net.ProgressSource.State state69 = progressSource64.getState();
        com.quakearts.rest.client.net.ProgressEvent progressEvent72 = new com.quakearts.rest.client.net.ProgressEvent(progressSource16, uRL43, "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state69, (long) 402, (long) 301);
        boolean boolean73 = keepAliveCache0.equals((java.lang.Object) 301);
        org.junit.Assert.assertNotNull(registeredDomainOptional2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str19, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.UPDATE + "'", state29.equals(com.quakearts.rest.client.net.ProgressSource.State.UPDATE));
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state36.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8192 + "'", int47 == 8192);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + state69 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.CONNECTED + "'", state69.equals(com.quakearts.rest.client.net.ProgressSource.State.CONNECTED));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setDoOutput(true);
        httpsURLConnectionImpl3.setRequestProperty("hi!", "");
        httpsURLConnectionImpl3.setReadTimeout((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = httpsURLConnectionImpl3.getContentLength();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream2 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream2.flush();
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream2);
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream6 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture5);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray8 = posterOutputStream7.toByteArray();
        byte[] byteArray9 = posterOutputStream7.toByteArray();
        httpCaptureOutputStream6.write(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream6.write(408);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        long long11 = httpsURLConnectionImpl3.getExpiration();
        boolean boolean12 = httpsURLConnectionImpl3.getDoInput();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setAllowUserInteraction(true);
        java.lang.String str11 = httpsURLConnectionImpl3.toString();
        java.net.URL uRL12 = httpsURLConnectionImpl3.getURL();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = httpsURLConnectionImpl3.getHeaderFieldLong("AuthenticationHeader: prefer null", (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str11, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNull(uRL12);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor2 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        progressMonitor2.registerSource(progressSource5);
        progressMonitor0.unregisterSource(progressSource5);
        com.quakearts.rest.client.net.ProgressListener progressListener9 = null;
        progressMonitor0.removeProgressListener(progressListener9);
        java.io.InputStream inputStream11 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream13 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture12);
        com.quakearts.rest.client.net.HttpCapture httpCapture14 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream15 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture14);
        java.net.URL uRL16 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource18 = new com.quakearts.rest.client.net.ProgressSource(uRL16, "");
        long long19 = progressSource18.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream21 = new com.quakearts.rest.client.net.MeteredStream(inputStream11, progressSource18, (long) (byte) 1);
        progressMonitor0.updateProgress(progressSource18);
        java.net.URL uRL23 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource25 = new com.quakearts.rest.client.net.ProgressSource(uRL23, "");
        progressMonitor0.updateProgress(progressSource25);
        com.quakearts.rest.client.net.ProgressListener progressListener27 = null;
        progressMonitor0.removeProgressListener(progressListener27);
        java.net.URL uRL29 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource31 = new com.quakearts.rest.client.net.ProgressSource(uRL29, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        long long32 = progressSource31.getProgress();
        java.lang.String str33 = progressSource31.getContentType();
        progressMonitor0.unregisterSource(progressSource31);
        com.quakearts.rest.client.net.ProgressMonitor.setDefault(progressMonitor0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "content/unknown" + "'", str33, "content/unknown");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        boolean boolean42 = chunkedInputStream41.hurry();
        boolean boolean43 = chunkedInputStream41.markSupported();
        java.lang.String str44 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) chunkedInputStream41);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream45 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream45.reset();
        posterOutputStream45.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream48 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray49 = posterOutputStream48.toByteArray();
        byte[] byteArray50 = posterOutputStream48.toByteArray();
        posterOutputStream45.write(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = chunkedInputStream41.read(byteArray50, 202, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        java.lang.String str3 = headerParser1.findKey(305);
        java.lang.String str5 = headerParser1.findValue("{size=10 nkeys=1  {hi!} }");
        java.lang.String str6 = headerParser1.toString();
        java.lang.String str8 = headerParser1.findKey(97);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{size=10 nkeys=1  {hi!} }" + "'", str6, "{size=10 nkeys=1  {hi!} }");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue3 = authCacheImpl0.get("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue5 = null;
        authCacheImpl0.remove("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]", authCacheValue5);
        org.junit.Assert.assertNull(authCacheValue3);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        java.net.URL uRL13 = httpURLConnectionImpl5.getURL();
        java.net.URL uRL14 = null;
        java.net.Proxy proxy15 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler18 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl19 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL14, proxy15, httpHandler18);
        int int20 = httpURLConnectionImpl19.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState21 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl19.setTunnelState(tunnelState21);
        boolean boolean23 = httpURLConnectionImpl19.streaming();
        java.net.URL uRL24 = null;
        java.net.Proxy proxy25 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler28 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl29 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL24, proxy25, httpHandler28);
        int int30 = httpURLConnectionImpl29.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState31 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl29.setTunnelState(tunnelState31);
        httpURLConnectionImpl19.setTunnelState(tunnelState31);
        httpURLConnectionImpl5.setTunnelState(tunnelState31);
        java.net.CookieHandler cookieHandler35 = httpURLConnectionImpl5.getCookieHandler();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = httpURLConnectionImpl5.getHeaderField(204);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(uRL13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState21 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState21.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState31 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState31.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertNull(cookieHandler35);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        com.quakearts.rest.client.net.http.HttpHandler httpHandler2 = new com.quakearts.rest.client.net.http.HttpHandler("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", 10);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory();
        httpsURLConnectionImpl3.setSSLSocketFactory(sSLSocketFactory10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream12 = httpsURLConnectionImpl3.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray5 = posterOutputStream4.toByteArray();
        byte[] byteArray6 = posterOutputStream4.toByteArray();
        posterOutputStream4.close();
        posterOutputStream4.write(405);
        posterOutputStream4.write((int) '#');
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream12 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream12.reset();
        posterOutputStream12.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream15 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray16 = posterOutputStream15.toByteArray();
        byte[] byteArray17 = posterOutputStream15.toByteArray();
        posterOutputStream12.write(byteArray17);
        posterOutputStream4.write(byteArray17, 204, (int) '4');
        posterOutputStream0.write(byteArray17);
        java.lang.String str23 = posterOutputStream0.toString();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        int int13 = httpsURLConnectionImpl3.getHeaderFieldInt("hi!", 100);
        int int14 = httpsURLConnectionImpl3.getReadTimeout();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = httpsURLConnectionImpl3.getRequestProperties();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource.State state6 = com.quakearts.rest.client.net.ProgressSource.State.UPDATE;
        com.quakearts.rest.client.net.ProgressEvent progressEvent9 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL3, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state6, (long) 501, (long) 304);
        java.net.URL uRL10 = null;
        com.quakearts.rest.client.net.ProgressSource.State state13 = com.quakearts.rest.client.net.ProgressSource.State.NEW;
        com.quakearts.rest.client.net.ProgressEvent progressEvent16 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL10, "hi!", "GET", state13, 1L, (long) 408);
        java.net.URL uRL17 = progressSource2.getURL();
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.UPDATE + "'", state6.equals(com.quakearts.rest.client.net.ProgressSource.State.UPDATE));
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state13.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
        org.junit.Assert.assertNull(uRL17);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) -1);
        java.net.URL uRL11 = httpsURLConnectionImpl3.getURL();
        httpsURLConnectionImpl3.setUseCaches(false);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNull(uRL11);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        httpsURLConnectionImpl3.disconnect();
        long long16 = httpsURLConnectionImpl3.getHeaderFieldLong("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]", (long) 300);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300L + "'", long16 == 300L);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        com.quakearts.rest.client.net.KeepAliveCache keepAliveCache0 = new com.quakearts.rest.client.net.KeepAliveCache();
        java.util.Optional<com.quakearts.rest.client.net.RegisteredDomainProducer.RegisteredDomain> registeredDomainOptional2 = com.quakearts.rest.client.net.RegisteredDomainProducer.RegisteredDomain.from("");
        boolean boolean3 = keepAliveCache0.equals((java.lang.Object) registeredDomainOptional2);
        com.quakearts.rest.client.net.HeaderParser headerParser5 = new com.quakearts.rest.client.net.HeaderParser("GET");
        boolean boolean6 = keepAliveCache0.containsValue((java.lang.Object) headerParser5);
        keepAliveCache0.clear();
        keepAliveCache0.clear();
        keepAliveCache0.run();
        org.junit.Assert.assertNotNull(registeredDomainOptional2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) -1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getRequestProperties();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = httpsURLConnectionImpl3.getResponseMessage();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor.setDefault(progressMonitor0);
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList3 = progressMonitor0.getProgressSources();
        java.net.URL uRL4 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource6 = new com.quakearts.rest.client.net.ProgressSource(uRL4, "");
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(progressSource6);
        progressMonitor0.updateProgress(progressSource6);
        java.net.URL uRL9 = null;
        boolean boolean11 = progressMonitor0.shouldMeterInput(uRL9, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(progressSourceList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(401);
        keepAliveStream36.mark(300);
        boolean boolean42 = keepAliveStream36.markSupported();
        boolean boolean43 = keepAliveStream36.markSupported();
        java.lang.String str44 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) keepAliveStream36);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        java.net.URL uRL13 = httpURLConnectionImpl5.getURL();
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.setRequestMethod("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: Invalid HTTP method: com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(uRL13);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        int int11 = httpURLConnectionImpl5.getReadTimeout();
        httpURLConnectionImpl5.disconnect();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue.setAuthCache((com.quakearts.rest.client.net.http.AuthCache) authCacheImpl0);
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue4 = authCacheImpl0.get("hi!", "GET");
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue6 = null;
        // The following exception was thrown during execution in test generation
        try {
            authCacheImpl0.put("{size=10 nkeys=1  {get} }", authCacheValue6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(authCacheValue4);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpClient httpClient42 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader43 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str45 = messageHeader43.getValue(503);
        messageHeader43.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient42, messageHeader43);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream50 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream50.reset();
        posterOutputStream50.flush();
        posterOutputStream50.write(8192);
        posterOutputStream50.reset();
        byte[] byteArray56 = posterOutputStream50.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            int int59 = chunkedInputStream49.read(byteArray56, 206, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = httpsURLConnectionImpl6.getContent(classArray12);
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertNotNull(classArray12);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
//        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        httpsURLConnectionImpl3.setConnectTimeout(501);
        httpsURLConnectionImpl3.setChunkedStreamingMode(501);
        httpsURLConnectionImpl3.setUseCaches(true);
        java.io.InputStream inputStream17 = httpsURLConnectionImpl3.getErrorStream();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
//        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(inputStream17);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        long long13 = httpsURLConnectionImpl3.getDate();
        httpsURLConnectionImpl3.setAllowUserInteraction(true);
        long long16 = httpsURLConnectionImpl3.getLastModified();
        java.lang.String str17 = httpsURLConnectionImpl3.getContentType();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray5 = posterOutputStream4.toByteArray();
        httpCaptureOutputStream3.write(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream3.write(97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        java.lang.String str7 = httpsURLConnectionImpl3.getRequestProperty("hi!");
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10L);
        httpsURLConnectionImpl3.setDoInput(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = httpsURLConnectionImpl3.getContent();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        java.lang.String str6 = httpsURLConnectionImpl3.getRequestMethod();
        java.lang.String str7 = httpsURLConnectionImpl3.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = httpsURLConnectionImpl3.getExpiration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str7, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        long long14 = httpsURLConnectionImpl3.getHeaderFieldDate("content/unknown", (long) (short) 100);
        httpsURLConnectionImpl3.setDoOutput(true);
        httpsURLConnectionImpl3.setDoInput(true);
        httpsURLConnectionImpl3.setReadTimeout(32);
        boolean boolean21 = httpsURLConnectionImpl3.getAllowUserInteraction();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "GET");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setDoOutput(true);
        boolean boolean8 = httpsURLConnectionImpl3.getAllowUserInteraction();
        long long9 = httpsURLConnectionImpl3.getIfModifiedSince();
        httpsURLConnectionImpl3.setInstanceFollowRedirects(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = httpsURLConnectionImpl3.getHeaderField("{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(404);
        com.quakearts.rest.client.net.ProgressSource progressSource41 = null;
        com.quakearts.rest.client.net.MeteredStream meteredStream43 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) keepAliveStream36, progressSource41, (long) 32);
        byte[] byteArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int45 = keepAliveStream36.read(byteArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        com.quakearts.rest.client.net.https.HostnameChecker hostnameChecker1 = com.quakearts.rest.client.net.https.HostnameChecker.getInstance((byte) 2);
        java.security.cert.X509Certificate x509Certificate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            hostnameChecker1.match("{size=10 nkeys=1  {get} }", x509Certificate3);
            org.junit.Assert.fail("Expected exception of type java.security.cert.CertificateException; message: Illegal given domain name: {size=10 nkeys=1  {get} }");
        } catch (java.security.cert.CertificateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameChecker1);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        boolean boolean10 = httpsURLConnectionImpl3.getDoInput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getRequestProperties();
        long long12 = httpsURLConnectionImpl3.getIfModifiedSince();
        java.lang.String str14 = httpsURLConnectionImpl3.getRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = httpsURLConnectionImpl3.getResponseMessage();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        com.quakearts.rest.client.net.HttpCapture httpCapture39 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream40 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture39);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor41 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL42 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource44 = new com.quakearts.rest.client.net.ProgressSource(uRL42, "");
        long long45 = progressSource44.getExpected();
        progressMonitor41.registerSource(progressSource44);
        progressSource44.close();
        java.net.URL uRL48 = progressSource44.getURL();
        com.quakearts.rest.client.net.HttpClient httpClient50 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream51 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) httpCaptureInputStream40, progressSource44, (long) 'a', httpClient50);
        boolean boolean52 = keepAliveStream51.markSupported();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(uRL48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        java.lang.String str3 = progressSource2.getMethod();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]" + "'", str3, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        httpsURLConnectionImpl3.setConnectTimeout((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setRequestProperty("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal character(s) in message header field: com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        com.quakearts.rest.client.net.MessageHeader messageHeader16 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str18 = messageHeader16.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader16.set(406, "content/unknown", "hi!");
        messageHeader16.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader39 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader16, (java.util.Set<java.lang.String>) strSet37);
        httpURLConnectionImpl5.authObj((java.lang.Object) "");
        httpURLConnectionImpl5.setRequestProperty("", "{size=10 nkeys=1  {hi!} }");
        httpURLConnectionImpl5.setConnectTimeout(407);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = httpURLConnectionImpl5.getContentType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        httpsURLConnectionImpl3.setReadTimeout(10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getRequestProperties();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 100);
        long long14 = httpsURLConnectionImpl3.getLastModified();
        long long15 = httpsURLConnectionImpl3.getContentLengthLong();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        httpsURLConnectionImpl5.setFixedLengthStreamingMode((long) 203);
        java.lang.String str19 = httpsURLConnectionImpl5.getContentType();
        httpsURLConnectionImpl5.setUseCaches(false);
        int int24 = httpsURLConnectionImpl5.getHeaderFieldInt("p4", 504);
        java.lang.String str25 = httpsURLConnectionImpl5.getContentType();
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 504 + "'", int24 == 504);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(505);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = keepAliveStream36.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(404);
        com.quakearts.rest.client.net.ProgressSource progressSource41 = null;
        com.quakearts.rest.client.net.MeteredStream meteredStream43 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) keepAliveStream36, progressSource41, (long) 32);
        com.quakearts.rest.client.net.HttpCapture httpCapture44 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream45 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture44);
        keepAliveStream36.mark(304);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream48 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream48.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream50 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream50.reset();
        posterOutputStream50.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream53 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray54 = posterOutputStream53.toByteArray();
        byte[] byteArray55 = posterOutputStream53.toByteArray();
        posterOutputStream50.write(byteArray55);
        posterOutputStream48.write(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = keepAliveStream36.read(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) -1);
        java.lang.String str11 = httpsURLConnectionImpl3.getRequestMethod();
        httpsURLConnectionImpl3.disconnect();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = httpsURLConnectionImpl3.getSSLSocketFactory();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(sSLSocketFactory13);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        boolean boolean8 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) -1);
        java.lang.String str11 = httpsURLConnectionImpl3.getRequestMethod();
        httpsURLConnectionImpl3.disconnect();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = httpsURLConnectionImpl3.getHeaderFields();
        long long14 = httpsURLConnectionImpl3.getDate();
        long long17 = httpsURLConnectionImpl3.getHeaderFieldDate("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]", 115L);
        boolean boolean18 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 115L + "'", long17 == 115L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.getValue(503);
        messageHeader0.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        messageHeader0.setIfNotSet("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "AuthenticationHeader: prefer null");
        java.lang.String str10 = messageHeader0.getValue(402);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        httpURLConnectionImpl5.setAuthenticationProperty("{}", "{}");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = httpURLConnectionImpl5.getHeaderField(405);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        long long6 = httpsURLConnectionImpl3.getIfModifiedSince();
        java.io.InputStream inputStream7 = httpsURLConnectionImpl3.getErrorStream();
        boolean boolean8 = httpsURLConnectionImpl3.getAllowUserInteraction();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(inputStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        int int12 = httpsURLConnectionImpl3.getHeaderFieldInt("GET", 403);
        java.lang.String str14 = httpsURLConnectionImpl3.getHeaderFieldKey((int) (short) 0);
        java.lang.String str16 = httpsURLConnectionImpl3.getHeaderField(0);
        java.lang.String str17 = httpsURLConnectionImpl3.getRequestMethod();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 403 + "'", int12 == 403);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        boolean boolean9 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        boolean boolean10 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.setDefaultUseCaches(false);
        boolean boolean13 = httpsURLConnectionImpl3.getUseCaches();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.net.URL uRL15 = null;
        java.net.Proxy proxy16 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler19 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl20 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL15, proxy16, httpHandler19);
        int int21 = httpURLConnectionImpl20.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState22 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl20.setTunnelState(tunnelState22);
        boolean boolean24 = httpURLConnectionImpl20.streaming();
        java.io.InputStream inputStream25 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream26 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream27 = httpURLConnectionImpl20.getErrorStream();
        boolean boolean28 = httpURLConnectionImpl20.usingProxy();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState29 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE;
        httpURLConnectionImpl20.setTunnelState(tunnelState29);
        httpURLConnectionImpl5.setTunnelState(tunnelState29);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream32 = httpURLConnectionImpl5.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState22 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState22.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputStream25);
        org.junit.Assert.assertNull(inputStream26);
        org.junit.Assert.assertNull(inputStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + tunnelState29 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE + "'", tunnelState29.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE));
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        httpURLConnectionImpl5.setRequestProperty("{}", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.setRequestProperty("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal character(s) in message header field: com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        int int11 = httpURLConnectionImpl5.getConnectTimeout();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState13 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState13);
        httpURLConnectionImpl5.setConnectTimeout((int) 'a');
        int int17 = httpURLConnectionImpl5.getConnectTimeout();
        java.lang.String str19 = httpURLConnectionImpl5.getRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        boolean boolean20 = httpURLConnectionImpl5.usingProxy();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + tunnelState13 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState13.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        java.lang.String str17 = httpsURLConnectionImpl5.getRequestMethod();
        long long20 = httpsURLConnectionImpl5.getHeaderFieldLong("hi!", (long) ' ');
        java.lang.String str21 = httpsURLConnectionImpl5.toString();
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str21, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = meteredStream10.markSupported();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpCapture httpCapture42 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream43 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) meteredStream10, httpCapture42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) meteredStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getExpected();
        com.quakearts.rest.client.net.ProgressSource.State state14 = progressEvent12.getState();
        java.lang.Object obj15 = progressEvent12.getSource();
        java.lang.String str16 = progressEvent12.toString();
        java.lang.String str17 = progressEvent12.getMethod();
        java.lang.Object obj18 = progressEvent12.getSource();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(state14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]" + "'", str16, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setDoInput(false);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.connect();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        java.lang.String str7 = httpsURLConnectionImpl3.getRequestProperty("hi!");
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10L);
        httpsURLConnectionImpl3.setDoInput(true);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = httpsURLConnectionImpl3.getHeaderFields();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        java.lang.String str15 = httpURLConnectionImpl5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null" + "'", str15, "com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null");
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        boolean boolean8 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.setReadTimeout(303);
        long long11 = httpsURLConnectionImpl3.getContentLengthLong();
        int int14 = httpsURLConnectionImpl3.getHeaderFieldInt("{size=10 nkeys=1  {get} }", 8192);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("GET");
        java.lang.String str2 = headerParser1.toString();
        java.util.Iterator<java.lang.String> strItor3 = headerParser1.values();
        java.lang.String str5 = headerParser1.findKey(409);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{size=10 nkeys=1  {get} }" + "'", str2, "{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        com.quakearts.rest.client.net.HttpCapture httpCapture39 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream40 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture39);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor41 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL42 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource44 = new com.quakearts.rest.client.net.ProgressSource(uRL42, "");
        long long45 = progressSource44.getExpected();
        progressMonitor41.registerSource(progressSource44);
        progressSource44.close();
        java.net.URL uRL48 = progressSource44.getURL();
        com.quakearts.rest.client.net.HttpClient httpClient50 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream51 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) httpCaptureInputStream40, progressSource44, (long) 'a', httpClient50);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream52 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream52.reset();
        posterOutputStream52.flush();
        posterOutputStream52.write(8192);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream57 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream57.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream59 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream59.flush();
        posterOutputStream57.writeTo((java.io.OutputStream) posterOutputStream59);
        com.quakearts.rest.client.net.HttpCapture httpCapture62 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream63 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream57, httpCapture62);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream64 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray65 = posterOutputStream64.toByteArray();
        byte[] byteArray66 = posterOutputStream64.toByteArray();
        httpCaptureOutputStream63.write(byteArray66);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream68 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray69 = posterOutputStream68.toByteArray();
        httpCaptureOutputStream63.write(byteArray69);
        posterOutputStream52.write(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = httpCaptureInputStream40.read(byteArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(uRL48);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        com.quakearts.rest.client.net.https.HostnameChecker hostnameChecker1 = com.quakearts.rest.client.net.https.HostnameChecker.getInstance((byte) 1);
        java.security.cert.X509Certificate x509Certificate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            hostnameChecker1.match("p4", x509Certificate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameChecker1);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("GET");
        java.lang.String str4 = headerParser1.findValue("hi!", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        int int7 = headerParser1.findInt("content/unknown", 502);
        java.lang.String str9 = headerParser1.findValue(503);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str4, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 502 + "'", int7 == 502);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        java.lang.String str10 = httpsURLConnectionImpl3.toString();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str10, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        messageHeader1.set("content/unknown", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        messageHeader1.parseHeader(inputStream5);
        java.lang.String str10 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        java.lang.String[] strArray21 = new java.lang.String[] { "GET", "{size=10 nkeys=1  {hi!} }", "GET", "AuthenticationHeader: prefer null", "{size=10 nkeys=1  {get} }", "", "", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "content/unknown", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader24 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader1, (java.util.Set<java.lang.String>) strSet22);
        com.quakearts.rest.client.net.HeaderParser headerParser25 = authenticationHeader24.headerParser();
        java.lang.String str26 = authenticationHeader24.toString();
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(headerParser25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AuthenticationHeader: prefer null" + "'", str26, "AuthenticationHeader: prefer null");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        boolean boolean3 = progressSource2.connected();
        java.net.URL uRL4 = progressSource2.getURL();
        progressSource2.finishTracking();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(uRL4);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader0.set(406, "content/unknown", "hi!");
        messageHeader0.set(402, "GET", "");
        messageHeader0.set((int) (short) 1, "GET", "{size=10 nkeys=1  {hi!} }");
        int int16 = messageHeader0.getKey("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader0.set(405, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "GET");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpClient httpClient42 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader43 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str45 = messageHeader43.getValue(503);
        messageHeader43.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient42, messageHeader43);
        com.quakearts.rest.client.net.HttpCapture httpCapture50 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream51 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) meteredStream10, httpCapture50);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream52 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray53 = posterOutputStream52.toByteArray();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream54 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream54.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture56 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream57 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream54, httpCapture56);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream58 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray59 = posterOutputStream58.toByteArray();
        httpCaptureOutputStream57.write(byteArray59);
        posterOutputStream52.write(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = httpCaptureInputStream51.read(byteArray59, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(404);
        com.quakearts.rest.client.net.ProgressSource progressSource41 = null;
        com.quakearts.rest.client.net.MeteredStream meteredStream43 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) keepAliveStream36, progressSource41, (long) 32);
        com.quakearts.rest.client.net.HttpCapture httpCapture44 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream45 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture44);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = keepAliveStream36.hurry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        long long3 = progressSource2.getProgress();
        com.quakearts.rest.client.net.ProgressSource progressSource4 = new com.quakearts.rest.client.net.ProgressSource(progressSource2);
        boolean boolean5 = progressSource4.connected();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        boolean boolean4 = progressSource3.connected();
        boolean boolean5 = progressSource3.connected();
        progressMonitor0.registerSource(progressSource3);
        int int7 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressListener progressListener8 = null;
        progressMonitor0.removeProgressListener(progressListener8);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        boolean boolean42 = chunkedInputStream41.hurry();
        boolean boolean43 = chunkedInputStream41.markSupported();
        boolean boolean44 = chunkedInputStream41.hurry();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        java.net.URL uRL27 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource29 = new com.quakearts.rest.client.net.ProgressSource(uRL27, "");
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(progressSource29);
        com.quakearts.rest.client.net.MeteredStream meteredStream32 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource29, (long) 505);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = meteredStream10.skip((long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(505);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor40 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL41 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource43 = new com.quakearts.rest.client.net.ProgressSource(uRL41, "");
        long long44 = progressSource43.getExpected();
        progressMonitor40.registerSource(progressSource43);
        java.lang.String str46 = progressSource43.getContentType();
        com.quakearts.rest.client.net.MeteredStream meteredStream48 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) keepAliveStream36, progressSource43, (long) (byte) 10);
        boolean boolean49 = keepAliveStream36.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            keepAliveStream36.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "content/unknown" + "'", str46, "content/unknown");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getHeaderFields();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = httpsURLConnectionImpl3.getResponseCode();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        httpsURLConnectionImpl3.setDefaultUseCaches(false);
        int int11 = httpsURLConnectionImpl3.getConnectTimeout();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = httpsURLConnectionImpl3.getRequestProperties();
        // The following exception was thrown during execution in test generation
        try {
            java.security.Permission permission13 = httpsURLConnectionImpl3.getPermission();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        java.lang.String str3 = headerParser1.findKey(305);
        java.lang.String str5 = headerParser1.findValue("{size=10 nkeys=1  {hi!} }");
        java.lang.String str7 = headerParser1.findValue(8192);
        java.lang.String str9 = headerParser1.findValue(32);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) -1);
        java.lang.String str11 = httpsURLConnectionImpl3.getRequestMethod();
        boolean boolean12 = httpsURLConnectionImpl3.getAllowUserInteraction();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        httpsURLConnectionImpl3.setConnectTimeout((int) (short) 0);
        httpsURLConnectionImpl3.disconnect();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        long long17 = httpsURLConnectionImpl5.getExpiration();
        long long20 = httpsURLConnectionImpl5.getHeaderFieldDate("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", 206L);
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 206L + "'", long20 == 206L);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        boolean boolean9 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        boolean boolean10 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        com.quakearts.rest.client.net.ProgressSource.State state6 = progressSource2.getState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.CONNECTED + "'", state6.equals(com.quakearts.rest.client.net.ProgressSource.State.CONNECTED));
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        httpsURLConnectionImpl3.setDoInput(false);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        httpsURLConnectionImpl5.setFixedLengthStreamingMode((long) 203);
        java.lang.String str19 = httpsURLConnectionImpl5.getContentType();
        httpsURLConnectionImpl5.setUseCaches(false);
        int int24 = httpsURLConnectionImpl5.getHeaderFieldInt("p4", 504);
        long long25 = httpsURLConnectionImpl5.getDate();
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream26 = httpsURLConnectionImpl5.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 504 + "'", int24 == 504);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setReadTimeout(503);
        httpsURLConnectionImpl3.setConnectTimeout(203);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        boolean boolean11 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = httpsURLConnectionImpl3.getHeaderFieldDate("hi!", (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler7 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl8 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL3, proxy4, httpHandler7);
        int int9 = httpURLConnectionImpl8.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState10 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl8.setTunnelState(tunnelState10);
        boolean boolean12 = httpURLConnectionImpl8.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl8.getErrorStream();
        java.io.InputStream inputStream14 = httpURLConnectionImpl8.getErrorStream();
        boolean boolean15 = httpURLConnectionImpl8.streaming();
        java.io.InputStream inputStream16 = httpURLConnectionImpl8.getErrorStream();
        java.net.CookieHandler cookieHandler17 = httpURLConnectionImpl8.getCookieHandler();
        // The following exception was thrown during execution in test generation
        try {
            com.quakearts.rest.client.net.HttpClient httpClient18 = com.quakearts.rest.client.net.HttpClient.createNew(uRL0, proxy1, 206, httpURLConnectionImpl8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState10 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState10.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(inputStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputStream16);
        org.junit.Assert.assertNull(cookieHandler17);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        int int9 = httpURLConnectionImpl5.getConnectTimeout();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setFixedLengthStreamingMode((long) 205);
        java.lang.String str14 = httpURLConnectionImpl5.getRequestProperty("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor.setDefault(progressMonitor0);
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList3 = progressMonitor0.getProgressSources();
        java.net.URL uRL4 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource6 = new com.quakearts.rest.client.net.ProgressSource(uRL4, "");
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(progressSource6);
        progressMonitor0.updateProgress(progressSource6);
        java.io.InputStream inputStream9 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture10 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream11 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream9, httpCapture10);
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream13 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream9, httpCapture12);
        java.net.URL uRL14 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource16 = new com.quakearts.rest.client.net.ProgressSource(uRL14, "");
        long long17 = progressSource16.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream19 = new com.quakearts.rest.client.net.MeteredStream(inputStream9, progressSource16, (long) (byte) 1);
        java.net.URL uRL20 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource22 = new com.quakearts.rest.client.net.ProgressSource(uRL20, "");
        progressSource22.close();
        boolean boolean24 = progressSource22.connected();
        progressSource22.finishTracking();
        java.net.URL uRL26 = null;
        com.quakearts.rest.client.net.ProgressSource.State state29 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent32 = new com.quakearts.rest.client.net.ProgressEvent(progressSource22, uRL26, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state29, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource33 = new com.quakearts.rest.client.net.ProgressSource(progressSource22);
        com.quakearts.rest.client.net.MeteredStream meteredStream35 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream19, progressSource22, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor36 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL37 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource39 = new com.quakearts.rest.client.net.ProgressSource(uRL37, "");
        long long40 = progressSource39.getExpected();
        progressMonitor36.registerSource(progressSource39);
        java.lang.String str42 = progressSource39.toString();
        com.quakearts.rest.client.net.ProgressSource progressSource43 = new com.quakearts.rest.client.net.ProgressSource(progressSource39);
        com.quakearts.rest.client.net.HttpClient httpClient45 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream46 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream35, progressSource43, (long) 303, httpClient45);
        progressMonitor0.unregisterSource(progressSource43);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(progressSourceList3);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str42, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.io.OutputStream outputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream2 = new com.quakearts.rest.client.net.HttpCaptureOutputStream(outputStream0, httpCapture1);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream3 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream3.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream6 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream3, httpCapture5);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream7.reset();
        posterOutputStream7.flush();
        posterOutputStream7.write(8192);
        posterOutputStream7.reset();
        byte[] byteArray13 = posterOutputStream7.toByteArray();
        httpCaptureOutputStream6.write(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream2.write(byteArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        httpURLConnectionImpl5.disconnect();
        boolean boolean12 = httpURLConnectionImpl5.usingProxy();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.net.URLConnection.setDefaultRequestProperty("GET", "hi!");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream4.reset();
        posterOutputStream4.flush();
        posterOutputStream4.write(8192);
        posterOutputStream4.reset();
        byte[] byteArray10 = posterOutputStream4.toByteArray();
        httpCaptureOutputStream3.write(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream3.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        boolean boolean10 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean11 = httpsURLConnectionImpl3.getDefaultUseCaches();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = httpsURLConnectionImpl3.getHostnameVerifier();
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setChunkedStreamingMode((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Fixed length streaming mode set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(hostnameVerifier12);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(505);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor40 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL41 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource43 = new com.quakearts.rest.client.net.ProgressSource(uRL41, "");
        long long44 = progressSource43.getExpected();
        progressMonitor40.registerSource(progressSource43);
        java.lang.String str46 = progressSource43.getContentType();
        com.quakearts.rest.client.net.MeteredStream meteredStream48 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) keepAliveStream36, progressSource43, (long) (byte) 10);
        boolean boolean49 = keepAliveStream36.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            keepAliveStream36.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "content/unknown" + "'", str46, "content/unknown");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.disconnect();
        int int8 = httpsURLConnectionImpl3.getConnectTimeout();
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.net.URL uRL11 = httpsURLConnectionImpl3.getURL();
        int int12 = httpsURLConnectionImpl3.getReadTimeout();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        progressSource2.finishTracking();
        com.quakearts.rest.client.net.ProgressSource progressSource14 = new com.quakearts.rest.client.net.ProgressSource(progressSource2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        httpURLConnectionImpl5.setReadTimeout(206);
        // The following exception was thrown during execution in test generation
        try {
            java.security.Permission permission15 = httpURLConnectionImpl5.getPermission();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertNull(inputStream12);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader0.set(406, "content/unknown", "hi!");
        messageHeader0.set(402, "GET", "");
        messageHeader0.set((int) (short) 1, "GET", "{size=10 nkeys=1  {hi!} }");
        messageHeader0.remove("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        java.io.InputStream inputStream17 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture18 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream19 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream17, httpCapture18);
        com.quakearts.rest.client.net.HttpCapture httpCapture20 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream21 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream17, httpCapture20);
        java.net.URL uRL22 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(uRL22, "");
        long long25 = progressSource24.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream27 = new com.quakearts.rest.client.net.MeteredStream(inputStream17, progressSource24, (long) (byte) 1);
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        progressSource30.close();
        boolean boolean32 = progressSource30.connected();
        progressSource30.finishTracking();
        java.net.URL uRL34 = null;
        com.quakearts.rest.client.net.ProgressSource.State state37 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent40 = new com.quakearts.rest.client.net.ProgressEvent(progressSource30, uRL34, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state37, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource41 = new com.quakearts.rest.client.net.ProgressSource(progressSource30);
        com.quakearts.rest.client.net.MeteredStream meteredStream43 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream27, progressSource30, (long) 32);
        com.quakearts.rest.client.net.HttpClient httpClient44 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader45 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream46 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture47 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream48 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream46, httpCapture47);
        com.quakearts.rest.client.net.HttpCapture httpCapture49 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream50 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream46, httpCapture49);
        messageHeader45.parseHeader(inputStream46);
        java.io.InputStream inputStream52 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture53 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream54 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream52, httpCapture53);
        com.quakearts.rest.client.net.HttpCapture httpCapture55 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream56 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream52, httpCapture55);
        java.net.URL uRL57 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource59 = new com.quakearts.rest.client.net.ProgressSource(uRL57, "");
        long long60 = progressSource59.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream62 = new com.quakearts.rest.client.net.MeteredStream(inputStream52, progressSource59, (long) (byte) 1);
        messageHeader45.parseHeader(inputStream52);
        java.lang.String str65 = messageHeader45.getValue(409);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream66 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream27, httpClient44, messageHeader45);
        java.lang.String str67 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) chunkedInputStream66);
        boolean boolean68 = chunkedInputStream66.hurry();
        // The following exception was thrown during execution in test generation
        try {
            messageHeader0.parseHeader((java.io.InputStream) chunkedInputStream66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpCapture httpCapture42 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream43 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) meteredStream10, httpCapture42);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor44 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL45 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource47 = new com.quakearts.rest.client.net.ProgressSource(uRL45, "");
        long long48 = progressSource47.getExpected();
        progressMonitor44.registerSource(progressSource47);
        java.lang.String str50 = progressSource47.toString();
        com.quakearts.rest.client.net.MeteredStream meteredStream52 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) httpCaptureInputStream43, progressSource47, (long) (byte) -1);
        com.quakearts.rest.client.net.ProgressSource progressSource53 = new com.quakearts.rest.client.net.ProgressSource(progressSource47);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str50, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        int int13 = httpsURLConnectionImpl3.getHeaderFieldInt("hi!", 100);
        int int14 = httpsURLConnectionImpl3.getReadTimeout();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = httpsURLConnectionImpl3.getHeaderFields();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        long long13 = httpsURLConnectionImpl3.getDate();
        httpsURLConnectionImpl3.setAllowUserInteraction(true);
        long long16 = httpsURLConnectionImpl3.getLastModified();
        java.lang.String str17 = httpsURLConnectionImpl3.toString();
        java.net.URL uRL18 = httpsURLConnectionImpl3.getURL();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str17, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNull(uRL18);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        int int15 = httpURLConnectionImpl5.getReadTimeout();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.disconnect();
        int int8 = httpsURLConnectionImpl3.getConnectTimeout();
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        boolean boolean11 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        posterOutputStream0.write(200);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream6 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream6.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream9 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream6, httpCapture8);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream10 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream10.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream13 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream10, httpCapture12);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream14 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray15 = posterOutputStream14.toByteArray();
        httpCaptureOutputStream13.write(byteArray15);
        httpCaptureOutputStream9.write(byteArray15);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream18 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray19 = posterOutputStream18.toByteArray();
        httpCaptureOutputStream9.write(byteArray19);
        posterOutputStream0.write(byteArray19);
        java.lang.String str23 = posterOutputStream0.toString(0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\310" + "'", str23, "\310");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("GET");
        java.lang.String str2 = headerParser1.toString();
        java.lang.String str4 = headerParser1.findValue(403);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{size=10 nkeys=1  {get} }" + "'", str2, "{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        boolean boolean1 = com.quakearts.rest.client.net.IPAddressUtil.isIPv4LiteralAddress("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        long long4 = progressSource3.getExpected();
        progressMonitor0.registerSource(progressSource3);
        java.lang.String str6 = progressSource3.toString();
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(progressSource3);
        com.quakearts.rest.client.net.ProgressSource progressSource8 = new com.quakearts.rest.client.net.ProgressSource(progressSource3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str6, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        com.quakearts.rest.client.net.MessageHeader messageHeader16 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str18 = messageHeader16.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader16.set(406, "content/unknown", "hi!");
        messageHeader16.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader39 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader16, (java.util.Set<java.lang.String>) strSet37);
        httpURLConnectionImpl5.authObj((java.lang.Object) "");
        httpURLConnectionImpl5.setRequestProperty("", "{size=10 nkeys=1  {hi!} }");
        httpURLConnectionImpl5.setConnectTimeout(407);
        httpURLConnectionImpl5.setReadTimeout((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = httpURLConnectionImpl5.getHeaderFieldDate("AuthenticationHeader: prefer null", 203L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        boolean boolean12 = httpsURLConnectionImpl3.getDoInput();
        long long15 = httpsURLConnectionImpl3.getHeaderFieldDate("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", (long) 'p');
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = httpsURLConnectionImpl3.getContent(classArray16);
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 112L + "'", long15 == 112L);
        org.junit.Assert.assertNotNull(classArray16);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        java.net.URL uRL27 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource29 = new com.quakearts.rest.client.net.ProgressSource(uRL27, "");
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(progressSource29);
        com.quakearts.rest.client.net.MeteredStream meteredStream32 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource29, (long) 505);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream33 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray34 = posterOutputStream33.toByteArray();
        byte[] byteArray35 = posterOutputStream33.toByteArray();
        posterOutputStream33.close();
        posterOutputStream33.write(405);
        posterOutputStream33.write((int) '#');
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream41 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream41.reset();
        posterOutputStream41.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream44 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray45 = posterOutputStream44.toByteArray();
        byte[] byteArray46 = posterOutputStream44.toByteArray();
        posterOutputStream41.write(byteArray46);
        posterOutputStream33.write(byteArray46, 204, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int51 = meteredStream32.read(byteArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream5 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream5.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream7.reset();
        posterOutputStream7.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream10 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray11 = posterOutputStream10.toByteArray();
        byte[] byteArray12 = posterOutputStream10.toByteArray();
        posterOutputStream7.write(byteArray12);
        posterOutputStream5.write(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = httpCaptureInputStream4.read(byteArray12, 201, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        int int11 = httpURLConnectionImpl5.getConnectTimeout();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState13 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState13);
        httpURLConnectionImpl5.setConnectTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.setRequestMethod("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: Invalid HTTP method: com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + tunnelState13 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState13.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpCapture httpCapture42 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream43 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) meteredStream10, httpCapture42);
        java.net.URL uRL44 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource46 = new com.quakearts.rest.client.net.ProgressSource(uRL44, "");
        progressSource46.close();
        progressSource46.close();
        com.quakearts.rest.client.net.MeteredStream meteredStream50 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource46, (long) 501);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor51 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int52 = progressMonitor51.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor53 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL54 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource56 = new com.quakearts.rest.client.net.ProgressSource(uRL54, "");
        long long57 = progressSource56.getExpected();
        progressMonitor53.registerSource(progressSource56);
        progressMonitor51.unregisterSource(progressSource56);
        com.quakearts.rest.client.net.ProgressListener progressListener60 = null;
        progressMonitor51.removeProgressListener(progressListener60);
        java.io.InputStream inputStream62 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture63 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream64 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream62, httpCapture63);
        com.quakearts.rest.client.net.HttpCapture httpCapture65 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream66 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream62, httpCapture65);
        java.net.URL uRL67 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource69 = new com.quakearts.rest.client.net.ProgressSource(uRL67, "");
        long long70 = progressSource69.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream72 = new com.quakearts.rest.client.net.MeteredStream(inputStream62, progressSource69, (long) (byte) 1);
        progressMonitor51.updateProgress(progressSource69);
        java.net.URL uRL74 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource76 = new com.quakearts.rest.client.net.ProgressSource(uRL74, "");
        progressMonitor51.updateProgress(progressSource76);
        com.quakearts.rest.client.net.ProgressListener progressListener78 = null;
        progressMonitor51.removeProgressListener(progressListener78);
        java.net.URL uRL80 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource82 = new com.quakearts.rest.client.net.ProgressSource(uRL80, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        long long83 = progressSource82.getProgress();
        java.lang.String str84 = progressSource82.getContentType();
        progressMonitor51.unregisterSource(progressSource82);
        long long86 = progressSource82.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream88 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream50, progressSource82, (long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = meteredStream50.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8192 + "'", int52 == 8192);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "content/unknown" + "'", str84, "content/unknown");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        com.quakearts.rest.client.net.HttpCapture httpCapture39 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream40 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture39);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor41 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL42 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource44 = new com.quakearts.rest.client.net.ProgressSource(uRL42, "");
        long long45 = progressSource44.getExpected();
        progressMonitor41.registerSource(progressSource44);
        progressSource44.close();
        java.net.URL uRL48 = progressSource44.getURL();
        com.quakearts.rest.client.net.HttpClient httpClient50 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream51 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) httpCaptureInputStream40, progressSource44, (long) 'a', httpClient50);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = keepAliveStream51.skip((long) 504);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(uRL48);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setConnectTimeout((int) ' ');
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.setIfModifiedSince(100L);
        httpsURLConnectionImpl6.setDefaultUseCaches(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = httpsURLConnectionImpl6.getHeaderFields();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        httpURLConnectionImpl5.setRequestProperty("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {get} }");
        java.net.URL uRL15 = null;
        java.net.Proxy proxy16 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler19 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl20 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL15, proxy16, httpHandler19);
        int int21 = httpURLConnectionImpl20.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState22 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl20.setTunnelState(tunnelState22);
        boolean boolean24 = httpURLConnectionImpl20.streaming();
        boolean boolean25 = httpURLConnectionImpl20.streaming();
        int int26 = httpURLConnectionImpl20.getConnectTimeout();
        java.io.InputStream inputStream27 = httpURLConnectionImpl20.getErrorStream();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState28 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl20.setTunnelState(tunnelState28);
        httpURLConnectionImpl5.setTunnelState(tunnelState28);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState22 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState22.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(inputStream27);
        org.junit.Assert.assertTrue("'" + tunnelState28 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState28.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader1.set(406, "content/unknown", "hi!");
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader8 = new com.quakearts.rest.client.net.http.AuthenticationHeader("content/unknown", messageHeader1);
        boolean boolean9 = authenticationHeader8.hasPreferredParserPresent();
        com.quakearts.rest.client.net.HeaderParser headerParser10 = authenticationHeader8.headerParser();
        java.lang.String str11 = authenticationHeader8.toString();
        java.lang.String str12 = authenticationHeader8.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(headerParser10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AuthenticationHeader: prefer null" + "'", str11, "AuthenticationHeader: prefer null");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AuthenticationHeader: prefer null" + "'", str12, "AuthenticationHeader: prefer null");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor2 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        progressMonitor2.registerSource(progressSource5);
        progressMonitor0.unregisterSource(progressSource5);
        com.quakearts.rest.client.net.ProgressListener progressListener9 = null;
        progressMonitor0.removeProgressListener(progressListener9);
        java.io.InputStream inputStream11 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream13 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture12);
        com.quakearts.rest.client.net.HttpCapture httpCapture14 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream15 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture14);
        java.net.URL uRL16 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource18 = new com.quakearts.rest.client.net.ProgressSource(uRL16, "");
        long long19 = progressSource18.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream21 = new com.quakearts.rest.client.net.MeteredStream(inputStream11, progressSource18, (long) (byte) 1);
        progressMonitor0.updateProgress(progressSource18);
        java.net.URL uRL23 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource25 = new com.quakearts.rest.client.net.ProgressSource(uRL23, "");
        progressMonitor0.updateProgress(progressSource25);
        com.quakearts.rest.client.net.KeepAliveCache keepAliveCache27 = new com.quakearts.rest.client.net.KeepAliveCache();
        java.util.Optional<com.quakearts.rest.client.net.RegisteredDomainProducer.RegisteredDomain> registeredDomainOptional29 = com.quakearts.rest.client.net.RegisteredDomainProducer.RegisteredDomain.from("");
        boolean boolean30 = keepAliveCache27.equals((java.lang.Object) registeredDomainOptional29);
        com.quakearts.rest.client.net.HeaderParser headerParser32 = new com.quakearts.rest.client.net.HeaderParser("GET");
        boolean boolean33 = keepAliveCache27.containsValue((java.lang.Object) headerParser32);
        keepAliveCache27.clear();
        keepAliveCache27.clear();
        com.quakearts.rest.client.net.MessageHeader messageHeader36 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str38 = messageHeader36.getValue(503);
        messageHeader36.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        messageHeader36.set("", "AuthenticationHeader: prefer null");
        java.net.URL uRL45 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource47 = new com.quakearts.rest.client.net.ProgressSource(uRL45, "");
        boolean boolean48 = progressSource47.connected();
        progressSource47.beginTracking();
        boolean boolean50 = keepAliveCache27.remove((java.lang.Object) "", (java.lang.Object) progressSource47);
        progressMonitor0.unregisterSource(progressSource47);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(registeredDomainOptional29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.getValue(503);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = messageHeader0.getHeaders();
        messageHeader0.set("{size=10 nkeys=1  {hi!} }", "content/unknown");
        java.lang.Class<?> wildcardClass7 = messageHeader0.getClass();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.getValue(503);
        messageHeader1.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = messageHeader1.getHeaders();
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader8 = new com.quakearts.rest.client.net.http.AuthenticationHeader("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", messageHeader1);
        java.io.InputStream inputStream9 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture10 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream11 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream9, httpCapture10);
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream13 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream9, httpCapture12);
        java.net.URL uRL14 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource16 = new com.quakearts.rest.client.net.ProgressSource(uRL14, "");
        long long17 = progressSource16.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream19 = new com.quakearts.rest.client.net.MeteredStream(inputStream9, progressSource16, (long) (byte) 1);
        java.net.URL uRL20 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource22 = new com.quakearts.rest.client.net.ProgressSource(uRL20, "");
        progressSource22.close();
        boolean boolean24 = progressSource22.connected();
        progressSource22.finishTracking();
        java.net.URL uRL26 = null;
        com.quakearts.rest.client.net.ProgressSource.State state29 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent32 = new com.quakearts.rest.client.net.ProgressEvent(progressSource22, uRL26, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state29, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource33 = new com.quakearts.rest.client.net.ProgressSource(progressSource22);
        com.quakearts.rest.client.net.MeteredStream meteredStream35 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream19, progressSource22, (long) 32);
        com.quakearts.rest.client.net.HttpClient httpClient36 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader37 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream38 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture39 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream40 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream38, httpCapture39);
        com.quakearts.rest.client.net.HttpCapture httpCapture41 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream42 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream38, httpCapture41);
        messageHeader37.parseHeader(inputStream38);
        java.io.InputStream inputStream44 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture45 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream46 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream44, httpCapture45);
        com.quakearts.rest.client.net.HttpCapture httpCapture47 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream48 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream44, httpCapture47);
        java.net.URL uRL49 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource51 = new com.quakearts.rest.client.net.ProgressSource(uRL49, "");
        long long52 = progressSource51.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream54 = new com.quakearts.rest.client.net.MeteredStream(inputStream44, progressSource51, (long) (byte) 1);
        messageHeader37.parseHeader(inputStream44);
        java.lang.String str57 = messageHeader37.getValue(409);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream58 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream19, httpClient36, messageHeader37);
        // The following exception was thrown during execution in test generation
        try {
            messageHeader1.parseHeader((java.io.InputStream) meteredStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        boolean boolean12 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.setDoOutput(true);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue.setAuthCache((com.quakearts.rest.client.net.http.AuthCache) authCacheImpl0);
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue3 = null;
        authCacheImpl0.remove("", authCacheValue3);
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue7 = authCacheImpl0.get("", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue9 = null;
        authCacheImpl0.remove("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]", authCacheValue9);
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue12 = null;
        authCacheImpl0.remove("p4", authCacheValue12);
        org.junit.Assert.assertNull(authCacheValue7);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        long long4 = progressSource3.getExpected();
        progressMonitor0.registerSource(progressSource3);
        com.quakearts.rest.client.net.ProgressListener progressListener6 = null;
        progressMonitor0.addProgressListener(progressListener6);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor8 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int9 = progressMonitor8.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor10 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        long long14 = progressSource13.getExpected();
        progressMonitor10.registerSource(progressSource13);
        progressMonitor8.unregisterSource(progressSource13);
        com.quakearts.rest.client.net.ProgressListener progressListener17 = null;
        progressMonitor8.removeProgressListener(progressListener17);
        java.io.InputStream inputStream19 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture20 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream21 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream19, httpCapture20);
        com.quakearts.rest.client.net.HttpCapture httpCapture22 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream23 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream19, httpCapture22);
        java.net.URL uRL24 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource26 = new com.quakearts.rest.client.net.ProgressSource(uRL24, "");
        long long27 = progressSource26.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream29 = new com.quakearts.rest.client.net.MeteredStream(inputStream19, progressSource26, (long) (byte) 1);
        progressMonitor8.updateProgress(progressSource26);
        progressMonitor0.unregisterSource(progressSource26);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor.setDefault(progressMonitor0);
        java.net.URL uRL3 = null;
        boolean boolean5 = progressMonitor0.shouldMeterInput(uRL3, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor6 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL7 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource9 = new com.quakearts.rest.client.net.ProgressSource(uRL7, "");
        long long10 = progressSource9.getExpected();
        progressMonitor6.registerSource(progressSource9);
        java.lang.String str12 = progressSource9.getContentType();
        progressSource9.setContentType("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        progressSource9.finishTracking();
        progressMonitor0.updateProgress(progressSource9);
        int int17 = progressMonitor0.getProgressUpdateThreshold();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "content/unknown" + "'", str12, "content/unknown");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setAllowUserInteraction(true);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.connect();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(404);
        com.quakearts.rest.client.net.ProgressSource progressSource41 = null;
        com.quakearts.rest.client.net.MeteredStream meteredStream43 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) keepAliveStream36, progressSource41, (long) 32);
        com.quakearts.rest.client.net.HttpCapture httpCapture44 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream45 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture44);
        keepAliveStream36.mark(304);
        // The following exception was thrown during execution in test generation
        try {
            keepAliveStream36.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(401);
        keepAliveStream36.mark(300);
        boolean boolean42 = keepAliveStream36.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = keepAliveStream36.hurry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.addRequestProperty("", "hi!");
        boolean boolean14 = httpURLConnectionImpl5.streaming();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList1 = progressMonitor0.getProgressSources();
        org.junit.Assert.assertNotNull(progressSourceList1);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = httpURLConnectionImpl5.getRequestProperties();
        httpURLConnectionImpl5.setConnectTimeout((int) 'a');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(404);
        // The following exception was thrown during execution in test generation
        try {
            keepAliveStream36.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.getValue(503);
        messageHeader0.add("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.util.Iterator<java.lang.String> strItor7 = messageHeader0.multiValueIterator("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "AuthenticationHeader: prefer null" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = messageHeader0.getHeaders(strArray10);
        messageHeader0.add("content/unknown", "");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.net.URL uRL15 = null;
        java.net.Proxy proxy16 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler19 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl20 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL15, proxy16, httpHandler19);
        int int21 = httpURLConnectionImpl20.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState22 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl20.setTunnelState(tunnelState22);
        boolean boolean24 = httpURLConnectionImpl20.streaming();
        java.io.InputStream inputStream25 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream26 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream27 = httpURLConnectionImpl20.getErrorStream();
        boolean boolean28 = httpURLConnectionImpl20.usingProxy();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState29 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE;
        httpURLConnectionImpl20.setTunnelState(tunnelState29);
        httpURLConnectionImpl5.setTunnelState(tunnelState29);
        java.lang.Object obj32 = httpURLConnectionImpl5.authObj();
        java.lang.String str34 = httpURLConnectionImpl5.getRequestProperty("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.setRequestProperty("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]", "com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal character(s) in message header field: com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState22 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState22.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputStream25);
        org.junit.Assert.assertNull(inputStream26);
        org.junit.Assert.assertNull(inputStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + tunnelState29 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE + "'", tunnelState29.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        int int12 = httpsURLConnectionImpl3.getHeaderFieldInt("GET", 403);
        java.lang.String str14 = httpsURLConnectionImpl3.getHeaderFieldKey((int) (short) 0);
        java.lang.String str16 = httpsURLConnectionImpl3.getHeaderField(0);
        java.lang.String str17 = httpsURLConnectionImpl3.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = httpsURLConnectionImpl3.getResponseCode();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 403 + "'", int12 == 403);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str17, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 8192);
        boolean boolean11 = httpsURLConnectionImpl3.getDoInput();
        int int12 = httpsURLConnectionImpl3.getReadTimeout();
        httpsURLConnectionImpl3.setDoInput(true);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = keepAliveStream36.hurry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier();
        httpsURLConnectionImpl5.setHostnameVerifier(hostnameVerifier17);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream19 = httpsURLConnectionImpl5.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        java.lang.String str3 = headerParser1.findKey(305);
        int int6 = headerParser1.findInt("hi!", 32);
        java.lang.String str8 = headerParser1.findValue(406);
        java.util.Iterator<java.lang.String> strItor9 = headerParser1.values();
        java.util.Iterator<java.lang.String> strItor10 = headerParser1.keys();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.ProgressSource progressSource34 = new com.quakearts.rest.client.net.ProgressSource(progressSource30);
        com.quakearts.rest.client.net.HttpClient httpClient36 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream37 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream26, progressSource34, (long) 303, httpClient36);
        com.quakearts.rest.client.net.HttpCapture httpCapture38 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream39 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream37, httpCapture38);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = keepAliveStream37.skip((long) 403);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setRequestProperty("{}", "{size=10 nkeys=1  {hi!} }");
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader1.set(406, "content/unknown", "hi!");
        messageHeader1.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray21 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader24 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader1, (java.util.Set<java.lang.String>) strSet22);
        java.lang.String str25 = authenticationHeader24.raw();
        boolean boolean26 = authenticationHeader24.hasPreferredParserPresent();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = meteredStream10.markSupported();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        long long13 = httpsURLConnectionImpl3.getDate();
        java.io.InputStream inputStream14 = httpsURLConnectionImpl3.getErrorStream();
        // The following exception was thrown during execution in test generation
        try {
            java.security.Permission permission15 = httpsURLConnectionImpl3.getPermission();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(inputStream14);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(505);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = keepAliveStream36.hurry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.HttpClient httpClient27 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader28 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream29 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture30 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream31 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream29, httpCapture30);
        com.quakearts.rest.client.net.HttpCapture httpCapture32 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream33 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream29, httpCapture32);
        messageHeader28.parseHeader(inputStream29);
        java.io.InputStream inputStream35 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture36 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream37 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream35, httpCapture36);
        com.quakearts.rest.client.net.HttpCapture httpCapture38 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream39 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream35, httpCapture38);
        java.net.URL uRL40 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource42 = new com.quakearts.rest.client.net.ProgressSource(uRL40, "");
        long long43 = progressSource42.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream45 = new com.quakearts.rest.client.net.MeteredStream(inputStream35, progressSource42, (long) (byte) 1);
        messageHeader28.parseHeader(inputStream35);
        java.lang.String str48 = messageHeader28.getValue(409);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient27, messageHeader28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) meteredStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor2 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        progressMonitor2.registerSource(progressSource5);
        progressMonitor0.unregisterSource(progressSource5);
        com.quakearts.rest.client.net.ProgressListener progressListener9 = null;
        progressMonitor0.removeProgressListener(progressListener9);
        java.io.InputStream inputStream11 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream13 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture12);
        com.quakearts.rest.client.net.HttpCapture httpCapture14 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream15 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture14);
        java.net.URL uRL16 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource18 = new com.quakearts.rest.client.net.ProgressSource(uRL16, "");
        long long19 = progressSource18.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream21 = new com.quakearts.rest.client.net.MeteredStream(inputStream11, progressSource18, (long) (byte) 1);
        progressMonitor0.updateProgress(progressSource18);
        progressSource18.beginTracking();
        java.lang.String str24 = progressSource18.getMethod();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        messageHeader1.set("content/unknown", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        messageHeader1.parseHeader(inputStream5);
        java.lang.String str10 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        java.lang.String[] strArray21 = new java.lang.String[] { "GET", "{size=10 nkeys=1  {hi!} }", "GET", "AuthenticationHeader: prefer null", "{size=10 nkeys=1  {get} }", "", "", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "content/unknown", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader24 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader1, (java.util.Set<java.lang.String>) strSet22);
        messageHeader1.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]", "{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        httpsURLConnectionImpl3.setDefaultUseCaches(false);
        java.lang.String str14 = httpsURLConnectionImpl3.getHeaderField(201);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setRequestMethod("content/unknown");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: connect in progress");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream1 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream3 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream1, httpCapture2);
        com.quakearts.rest.client.net.HttpCapture httpCapture4 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream5 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream1, httpCapture4);
        messageHeader0.parseHeader(inputStream1);
        java.io.InputStream inputStream7 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream9 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream7, httpCapture8);
        com.quakearts.rest.client.net.HttpCapture httpCapture10 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream11 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream7, httpCapture10);
        java.net.URL uRL12 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource14 = new com.quakearts.rest.client.net.ProgressSource(uRL12, "");
        long long15 = progressSource14.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream17 = new com.quakearts.rest.client.net.MeteredStream(inputStream7, progressSource14, (long) (byte) 1);
        messageHeader0.parseHeader(inputStream7);
        messageHeader0.set(204, "{}", "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 8192);
        java.net.URL uRL11 = null;
        java.net.Proxy proxy12 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler13 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl14 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL11, proxy12, httpsHandler13);
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = httpsURLConnectionImpl14.getHostnameVerifier();
        boolean boolean16 = httpsURLConnectionImpl14.getDoInput();
        httpsURLConnectionImpl14.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl14.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl14.setIfModifiedSince(0L);
        java.lang.Class<?> wildcardClass23 = httpsURLConnectionImpl14.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass23 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = httpsURLConnectionImpl3.getContent(classArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(hostnameVerifier15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        long long3 = progressSource2.getExpected();
        java.lang.String str4 = progressSource2.getContentType();
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(progressSource2);
        progressSource5.beginTracking();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "content/unknown" + "'", str4, "content/unknown");
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray1 = posterOutputStream0.toByteArray();
        posterOutputStream0.write((int) 'p');
        posterOutputStream0.write((int) '4');
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream6 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream6.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream9 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream6, httpCapture8);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream10 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream10.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream13 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream10, httpCapture12);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream14 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray15 = posterOutputStream14.toByteArray();
        httpCaptureOutputStream13.write(byteArray15);
        httpCaptureOutputStream9.write(byteArray15);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream18 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray19 = posterOutputStream18.toByteArray();
        httpCaptureOutputStream9.write(byteArray19);
        posterOutputStream0.write(byteArray19);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setDoOutput(true);
        boolean boolean8 = httpsURLConnectionImpl3.getAllowUserInteraction();
        long long9 = httpsURLConnectionImpl3.getIfModifiedSince();
        httpsURLConnectionImpl3.setInstanceFollowRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = httpsURLConnectionImpl3.getSSLSocketFactory();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(sSLSocketFactory12);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.net.URL uRL0 = null;
        java.net.URL uRL5 = null;
        java.net.Proxy proxy6 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler9 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl10 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL5, proxy6, httpHandler9);
        boolean boolean11 = httpURLConnectionImpl10.usingProxy();
        java.io.InputStream inputStream12 = httpURLConnectionImpl10.getErrorStream();
        java.net.URL uRL13 = httpURLConnectionImpl10.getURL();
        // The following exception was thrown during execution in test generation
        try {
            com.quakearts.rest.client.net.HttpClient httpClient14 = com.quakearts.rest.client.net.HttpClient.createNew(uRL0, "AuthenticationHeader: prefer null", 304, true, 415, httpURLConnectionImpl10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertNull(uRL13);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.security.Principal principal1 = null;
        boolean boolean2 = com.quakearts.rest.client.net.https.HostnameChecker.match("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", principal1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        boolean boolean12 = httpsURLConnectionImpl3.getDefaultUseCaches();
        long long15 = httpsURLConnectionImpl3.getHeaderFieldLong("content/unknown", (long) (byte) 1);
        boolean boolean16 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        boolean boolean17 = httpsURLConnectionImpl3.getDoOutput();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream4.reset();
        posterOutputStream4.flush();
        posterOutputStream4.write(8192);
        posterOutputStream4.reset();
        byte[] byteArray10 = posterOutputStream4.toByteArray();
        httpCaptureOutputStream3.write(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream3.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader1.set(406, "content/unknown", "hi!");
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader8 = new com.quakearts.rest.client.net.http.AuthenticationHeader("content/unknown", messageHeader1);
        boolean boolean9 = authenticationHeader8.hasPreferredParserPresent();
        com.quakearts.rest.client.net.HeaderParser headerParser10 = authenticationHeader8.headerParser();
        java.lang.String str11 = authenticationHeader8.toString();
        com.quakearts.rest.client.net.HeaderParser headerParser12 = authenticationHeader8.headerParser();
        boolean boolean13 = authenticationHeader8.hasPreferredParserPresent();
        boolean boolean14 = authenticationHeader8.hasPreferredParserPresent();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(headerParser10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AuthenticationHeader: prefer null" + "'", str11, "AuthenticationHeader: prefer null");
        org.junit.Assert.assertNull(headerParser12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.net.URL uRL15 = null;
        java.net.Proxy proxy16 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler19 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl20 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL15, proxy16, httpHandler19);
        int int21 = httpURLConnectionImpl20.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState22 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl20.setTunnelState(tunnelState22);
        boolean boolean24 = httpURLConnectionImpl20.streaming();
        java.io.InputStream inputStream25 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream26 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream27 = httpURLConnectionImpl20.getErrorStream();
        boolean boolean28 = httpURLConnectionImpl20.usingProxy();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState29 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE;
        httpURLConnectionImpl20.setTunnelState(tunnelState29);
        httpURLConnectionImpl5.setTunnelState(tunnelState29);
        java.lang.Object obj32 = httpURLConnectionImpl5.authObj();
        java.lang.String str34 = httpURLConnectionImpl5.getRequestProperty("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.addRequestProperty("com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal character(s) in message header field: com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState22 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState22.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputStream25);
        org.junit.Assert.assertNull(inputStream26);
        org.junit.Assert.assertNull(inputStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + tunnelState29 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE + "'", tunnelState29.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        long long14 = httpsURLConnectionImpl3.getHeaderFieldDate("content/unknown", (long) (short) 100);
        long long17 = httpsURLConnectionImpl3.getHeaderFieldDate("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", (long) 501);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = httpsURLConnectionImpl3.getCipherSuite();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: connection not yet open");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 501L + "'", long17 == 501L);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        long long6 = httpsURLConnectionImpl3.getIfModifiedSince();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 302);
        httpsURLConnectionImpl3.disconnect();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler6 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl7 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL2, proxy3, httpHandler6);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl8 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler6);
        httpURLConnectionImpl8.addRequestProperty("{size=10 nkeys=1  {hi!} }", "hi!");
        httpURLConnectionImpl8.setReadTimeout(300);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        boolean boolean11 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setReadTimeout((int) (byte) 2);
        java.io.InputStream inputStream14 = httpsURLConnectionImpl3.getErrorStream();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(inputStream14);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        progressSource2.beginTracking();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        boolean boolean12 = httpsURLConnectionImpl3.getDefaultUseCaches();
        int int13 = httpsURLConnectionImpl3.getReadTimeout();
        long long16 = httpsURLConnectionImpl3.getHeaderFieldDate("hi!", (long) 408);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = httpsURLConnectionImpl3.getRequestProperties();
        int int18 = httpsURLConnectionImpl3.getReadTimeout();
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 408L + "'", long16 == 408L);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setUseCaches(false);
        boolean boolean8 = httpsURLConnectionImpl3.getDoOutput();
        httpsURLConnectionImpl3.setDoInput(false);
        httpsURLConnectionImpl3.setDoInput(true);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue3 = authCacheImpl0.get("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue6 = authCacheImpl0.get("hi!", "");
        com.quakearts.rest.client.net.http.AuthCacheValue.setAuthCache((com.quakearts.rest.client.net.http.AuthCache) authCacheImpl0);
        org.junit.Assert.assertNull(authCacheValue3);
        org.junit.Assert.assertNull(authCacheValue6);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long12 = httpsURLConnectionImpl6.getLastModified();
        httpsURLConnectionImpl6.setInstanceFollowRedirects(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream15 = httpsURLConnectionImpl6.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean13 = httpURLConnectionImpl5.usingProxy();
        boolean boolean14 = httpURLConnectionImpl5.streaming();
        boolean boolean15 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.disconnect();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        boolean boolean1 = com.quakearts.rest.client.net.URLConnectionImpl.isProxiedHost("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        boolean boolean6 = httpURLConnectionImpl5.usingProxy();
        httpURLConnectionImpl5.setDoInput(false);
        httpURLConnectionImpl5.setUseCaches(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = httpURLConnectionImpl5.getResponseMessage();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: Cannot read from URLConnection if doInput=false (call setDoInput(true))");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.String str1 = java.net.URLConnection.getDefaultRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        boolean boolean10 = httpsURLConnectionImpl3.getDoInput();
        java.io.InputStream inputStream11 = httpsURLConnectionImpl3.getErrorStream();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputStream11);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.lang.String str1 = com.quakearts.rest.client.net.MessageHeader.canonicalID("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]" + "'", str1, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor.setDefault(progressMonitor0);
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList3 = progressMonitor0.getProgressSources();
        com.quakearts.rest.client.net.ProgressListener progressListener4 = null;
        progressMonitor0.removeProgressListener(progressListener4);
        com.quakearts.rest.client.net.ProgressListener progressListener6 = null;
        progressMonitor0.addProgressListener(progressListener6);
        com.quakearts.rest.client.net.ProgressListener progressListener8 = null;
        progressMonitor0.removeProgressListener(progressListener8);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(progressSourceList3);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        boolean boolean9 = httpsURLConnectionImpl3.getAllowUserInteraction();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = httpsURLConnectionImpl3.getContentEncoding();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpClient httpClient3 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader4 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream9 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture8);
        messageHeader4.parseHeader(inputStream5);
        messageHeader4.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor15 = messageHeader4.multiValueIterator("");
        messageHeader4.add("GET", "GET");
        java.lang.String[] strArray23 = new java.lang.String[] { "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "", "content/unknown", "{size=10 nkeys=1  {hi!} }" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = messageHeader4.getHeaders(strArray23);
        messageHeader4.remove("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader4.add("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream30 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) httpCaptureInputStream2, httpClient3, messageHeader4);
        boolean boolean31 = chunkedInputStream30.hurry();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = chunkedInputStream30.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler7 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl8 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL3, proxy4, httpHandler7);
        int int9 = httpURLConnectionImpl8.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState10 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl8.setTunnelState(tunnelState10);
        boolean boolean12 = httpURLConnectionImpl8.streaming();
        boolean boolean13 = httpURLConnectionImpl8.streaming();
        int int14 = httpURLConnectionImpl8.getConnectTimeout();
        java.io.InputStream inputStream15 = httpURLConnectionImpl8.getErrorStream();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState16 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl8.setTunnelState(tunnelState16);
        httpURLConnectionImpl8.setConnectTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.quakearts.rest.client.net.HttpClient httpClient20 = com.quakearts.rest.client.net.HttpClient.createNew(uRL0, proxy1, (int) 'p', httpURLConnectionImpl8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState10 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState10.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(inputStream15);
        org.junit.Assert.assertTrue("'" + tunnelState16 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState16.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray1 = posterOutputStream0.toByteArray();
        posterOutputStream0.write((int) 'p');
        posterOutputStream0.write((int) '4');
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream7 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture6);
        java.lang.String str9 = posterOutputStream0.toString(0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "p4" + "'", str9, "p4");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = httpsURLConnectionImpl3.getContent();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream2 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream2.flush();
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream2);
        posterOutputStream0.write(401);
        posterOutputStream0.flush();
        byte[] byteArray8 = posterOutputStream0.toByteArray();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream9 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream9.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture11 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream12 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream9, httpCapture11);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream13 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray14 = posterOutputStream13.toByteArray();
        httpCaptureOutputStream12.write(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            posterOutputStream0.writeTo((java.io.OutputStream) httpCaptureOutputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getProgress();
        long long14 = progressEvent12.getProgress();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300L + "'", long13 == 300L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300L + "'", long14 == 300L);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = httpURLConnectionImpl5.getHeaderFields();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        long long11 = httpsURLConnectionImpl3.getHeaderFieldDate("hi!", (long) 206);
        httpsURLConnectionImpl3.setUseCaches(true);
        java.lang.String str14 = httpsURLConnectionImpl3.getContentType();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) '4');
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = httpsURLConnectionImpl3.getContent(classArray17);
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 206L + "'", long11 == 206L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(classArray17);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        httpsURLConnectionImpl5.setFixedLengthStreamingMode((long) 203);
        java.lang.String str19 = httpsURLConnectionImpl5.getContentType();
        java.lang.String str21 = httpsURLConnectionImpl5.getHeaderField("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        int int13 = httpsURLConnectionImpl3.getHeaderFieldInt("hi!", 100);
        long long14 = httpsURLConnectionImpl3.getContentLengthLong();
        long long17 = httpsURLConnectionImpl3.getHeaderFieldLong("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]", (long) 405);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 405L + "'", long17 == 405L);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        httpsURLConnectionImpl3.setReadTimeout(10);
        httpsURLConnectionImpl3.setDoOutput(true);
        java.lang.String str14 = httpsURLConnectionImpl3.getRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]");
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        java.net.URL uRL13 = httpURLConnectionImpl5.getURL();
        java.net.URL uRL14 = null;
        java.net.Proxy proxy15 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler18 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl19 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL14, proxy15, httpHandler18);
        int int20 = httpURLConnectionImpl19.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState21 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl19.setTunnelState(tunnelState21);
        boolean boolean23 = httpURLConnectionImpl19.streaming();
        java.net.URL uRL24 = null;
        java.net.Proxy proxy25 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler28 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl29 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL24, proxy25, httpHandler28);
        int int30 = httpURLConnectionImpl29.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState31 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl29.setTunnelState(tunnelState31);
        httpURLConnectionImpl19.setTunnelState(tunnelState31);
        httpURLConnectionImpl5.setTunnelState(tunnelState31);
        java.net.CookieHandler cookieHandler35 = httpURLConnectionImpl5.getCookieHandler();
        httpURLConnectionImpl5.setAuthenticationProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "content/unknown");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(uRL13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState21 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState21.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState31 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState31.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertNull(cookieHandler35);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource.State state6 = com.quakearts.rest.client.net.ProgressSource.State.UPDATE;
        com.quakearts.rest.client.net.ProgressEvent progressEvent9 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL3, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state6, (long) 501, (long) 304);
        java.net.URL uRL10 = null;
        com.quakearts.rest.client.net.ProgressSource.State state13 = com.quakearts.rest.client.net.ProgressSource.State.NEW;
        com.quakearts.rest.client.net.ProgressEvent progressEvent16 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL10, "hi!", "GET", state13, 1L, (long) 408);
        long long17 = progressSource2.getProgress();
        java.net.URL uRL18 = null;
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor21 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL22 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(uRL22, "");
        long long25 = progressSource24.getExpected();
        progressMonitor21.registerSource(progressSource24);
        java.lang.String str27 = progressSource24.toString();
        java.net.URL uRL28 = null;
        java.net.URL uRL31 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource33 = new com.quakearts.rest.client.net.ProgressSource(uRL31, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.net.URL uRL34 = null;
        com.quakearts.rest.client.net.ProgressSource.State state37 = com.quakearts.rest.client.net.ProgressSource.State.UPDATE;
        com.quakearts.rest.client.net.ProgressEvent progressEvent40 = new com.quakearts.rest.client.net.ProgressEvent(progressSource33, uRL34, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state37, (long) 501, (long) 304);
        java.net.URL uRL41 = null;
        com.quakearts.rest.client.net.ProgressSource.State state44 = com.quakearts.rest.client.net.ProgressSource.State.NEW;
        com.quakearts.rest.client.net.ProgressEvent progressEvent47 = new com.quakearts.rest.client.net.ProgressEvent(progressSource33, uRL41, "hi!", "GET", state44, 1L, (long) 408);
        com.quakearts.rest.client.net.ProgressEvent progressEvent50 = new com.quakearts.rest.client.net.ProgressEvent(progressSource24, uRL28, "content/unknown", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state44, (long) 504, (long) (byte) 100);
        java.net.URL uRL51 = null;
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor54 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int55 = progressMonitor54.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor56 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL57 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource59 = new com.quakearts.rest.client.net.ProgressSource(uRL57, "");
        long long60 = progressSource59.getExpected();
        progressMonitor56.registerSource(progressSource59);
        progressMonitor54.unregisterSource(progressSource59);
        com.quakearts.rest.client.net.ProgressListener progressListener63 = null;
        progressMonitor54.removeProgressListener(progressListener63);
        java.io.InputStream inputStream65 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture66 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream67 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream65, httpCapture66);
        com.quakearts.rest.client.net.HttpCapture httpCapture68 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream69 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream65, httpCapture68);
        java.net.URL uRL70 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource72 = new com.quakearts.rest.client.net.ProgressSource(uRL70, "");
        long long73 = progressSource72.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream75 = new com.quakearts.rest.client.net.MeteredStream(inputStream65, progressSource72, (long) (byte) 1);
        progressMonitor54.updateProgress(progressSource72);
        com.quakearts.rest.client.net.ProgressSource.State state77 = progressSource72.getState();
        com.quakearts.rest.client.net.ProgressEvent progressEvent80 = new com.quakearts.rest.client.net.ProgressEvent(progressSource24, uRL51, "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state77, (long) 402, (long) 301);
        com.quakearts.rest.client.net.ProgressEvent progressEvent83 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL18, "content/unknown", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]", state77, (long) 413, (long) 'a');
        progressSource2.setContentType("AuthenticationHeader: prefer null");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.UPDATE + "'", state6.equals(com.quakearts.rest.client.net.ProgressSource.State.UPDATE));
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state13.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str27, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.UPDATE + "'", state37.equals(com.quakearts.rest.client.net.ProgressSource.State.UPDATE));
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state44.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8192 + "'", int55 == 8192);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + state77 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.CONNECTED + "'", state77.equals(com.quakearts.rest.client.net.ProgressSource.State.CONNECTED));
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.net.URL uRL15 = null;
        java.net.Proxy proxy16 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler19 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl20 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL15, proxy16, httpHandler19);
        int int21 = httpURLConnectionImpl20.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState22 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl20.setTunnelState(tunnelState22);
        boolean boolean24 = httpURLConnectionImpl20.streaming();
        java.io.InputStream inputStream25 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream26 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream27 = httpURLConnectionImpl20.getErrorStream();
        boolean boolean28 = httpURLConnectionImpl20.usingProxy();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState29 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE;
        httpURLConnectionImpl20.setTunnelState(tunnelState29);
        httpURLConnectionImpl5.setTunnelState(tunnelState29);
        java.lang.Object obj32 = httpURLConnectionImpl5.authObj();
        httpURLConnectionImpl5.setReadTimeout(10);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream35 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream35.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture37 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream38 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream35, httpCapture37);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream39 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream39.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture41 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream42 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream39, httpCapture41);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream43 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray44 = posterOutputStream43.toByteArray();
        httpCaptureOutputStream42.write(byteArray44);
        httpCaptureOutputStream38.write(byteArray44);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream47 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray48 = posterOutputStream47.toByteArray();
        httpCaptureOutputStream38.write(byteArray48);
        httpURLConnectionImpl5.authObj((java.lang.Object) httpCaptureOutputStream38);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState22 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState22.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputStream25);
        org.junit.Assert.assertNull(inputStream26);
        org.junit.Assert.assertNull(inputStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + tunnelState29 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE + "'", tunnelState29.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setConnectTimeout((int) ' ');
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.disconnect();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = httpsURLConnectionImpl6.getRequestProperties();
        boolean boolean14 = httpsURLConnectionImpl6.getAllowUserInteraction();
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        httpsURLConnectionImpl5.setUseCaches(false);
        long long21 = httpsURLConnectionImpl5.getHeaderFieldLong("", (long) 304);
        long long22 = httpsURLConnectionImpl5.getContentLengthLong();
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 304L + "'", long21 == 304L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        httpsURLConnectionImpl3.setDoInput(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = httpsURLConnectionImpl3.getHostnameVerifier();
        long long12 = httpsURLConnectionImpl3.getIfModifiedSince();
        long long15 = httpsURLConnectionImpl3.getHeaderFieldLong("{size=10 nkeys=1  {get} }", (long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = httpsURLConnectionImpl3.getResponseMessage();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNotNull(hostnameVerifier11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        boolean boolean9 = httpsURLConnectionImpl3.getDoInput();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        posterOutputStream0.flush();
        posterOutputStream0.write(8192);
        byte[] byteArray5 = posterOutputStream0.toByteArray();
        java.lang.String str7 = posterOutputStream0.toString((int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\000" + "'", str7, "\000");
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean13 = httpURLConnectionImpl5.usingProxy();
        boolean boolean14 = httpURLConnectionImpl5.streaming();
        boolean boolean15 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.addRequestProperty("GET", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
        httpURLConnectionImpl5.addRequestProperty("GET", "AuthenticationHeader: prefer null");
        httpURLConnectionImpl5.addRequestProperty("", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        httpURLConnectionImpl5.setReadTimeout(206);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = httpURLConnectionImpl5.getRequestProperties();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        boolean boolean11 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setReadTimeout((int) (byte) 2);
        boolean boolean14 = httpsURLConnectionImpl3.getUseCaches();
        httpsURLConnectionImpl3.setUseCaches(false);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = httpsURLConnectionImpl3.getHeaderFieldInt("p4", 411);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.getValue(503);
        messageHeader0.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = messageHeader0.getHeaders();
        messageHeader0.prepend("content/unknown", "p4");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray5 = posterOutputStream4.toByteArray();
        httpCaptureOutputStream3.write(byteArray5);
        com.quakearts.rest.client.net.HttpCapture httpCapture7 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream8 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) httpCaptureOutputStream3, httpCapture7);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream9 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream9.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture11 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream12 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream9, httpCapture11);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream13 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray14 = posterOutputStream13.toByteArray();
        byte[] byteArray15 = posterOutputStream13.toByteArray();
        posterOutputStream13.close();
        posterOutputStream13.write(405);
        posterOutputStream13.write((int) '#');
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream21 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream21.reset();
        posterOutputStream21.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream24 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray25 = posterOutputStream24.toByteArray();
        byte[] byteArray26 = posterOutputStream24.toByteArray();
        posterOutputStream21.write(byteArray26);
        posterOutputStream13.write(byteArray26, 204, (int) '4');
        posterOutputStream9.write(byteArray26);
        httpCaptureOutputStream3.write(byteArray26);
        com.quakearts.rest.client.net.HttpCapture httpCapture33 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream34 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) httpCaptureOutputStream3, httpCapture33);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        int int11 = httpURLConnectionImpl5.getConnectTimeout();
        httpURLConnectionImpl5.setConnectTimeout(0);
        boolean boolean14 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(503);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream2 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream2.flush();
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream2);
        posterOutputStream0.write(401);
        java.lang.String str7 = posterOutputStream0.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u2018" + "'", str7, "\u2018");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = httpsURLConnectionImpl3.getHeaderFields();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setUseCaches(false);
        boolean boolean8 = httpsURLConnectionImpl3.getDoOutput();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = httpsURLConnectionImpl3.getContentLength();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.lang.String str1 = com.quakearts.rest.client.net.MessageHeader.canonicalID("\u2018");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u2018" + "'", str1, "\u2018");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        boolean boolean3 = progressSource2.connected();
        progressSource2.close();
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(progressSource2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean13 = httpURLConnectionImpl5.usingProxy();
        boolean boolean14 = httpURLConnectionImpl5.streaming();
        boolean boolean15 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(402);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        long long14 = httpsURLConnectionImpl3.getHeaderFieldDate("content/unknown", (long) (short) 100);
        httpsURLConnectionImpl3.setDoOutput(true);
        httpsURLConnectionImpl3.setDoInput(true);
        int int19 = httpsURLConnectionImpl3.getReadTimeout();
        org.slf4j.Logger logger20 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.getHttpLogger();
        java.lang.Class<?> wildcardClass21 = logger20.getClass();
        java.net.URL uRL22 = null;
        java.net.Proxy proxy23 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler24 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl25 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL22, proxy23, httpsHandler24);
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = httpsURLConnectionImpl25.getHostnameVerifier();
        boolean boolean27 = httpsURLConnectionImpl25.getDoInput();
        httpsURLConnectionImpl25.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl25.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl25.setIfModifiedSince(0L);
        java.lang.Class<?> wildcardClass34 = httpsURLConnectionImpl25.getClass();
        com.quakearts.rest.client.net.MessageHeader messageHeader35 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str37 = messageHeader35.getValue(503);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = messageHeader35.getHeaders();
        messageHeader35.set("{size=10 nkeys=1  {hi!} }", "content/unknown");
        java.lang.Class<?> wildcardClass42 = messageHeader35.getClass();
        java.net.URL uRL43 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource45 = new com.quakearts.rest.client.net.ProgressSource(uRL43, "");
        boolean boolean46 = progressSource45.connected();
        progressSource45.beginTracking();
        java.lang.Class<?> wildcardClass48 = progressSource45.getClass();
        java.net.URL uRL49 = null;
        java.net.Proxy proxy50 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler51 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl52 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL49, proxy50, httpsHandler51);
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = httpsURLConnectionImpl52.getHostnameVerifier();
        boolean boolean54 = httpsURLConnectionImpl52.getDoInput();
        boolean boolean55 = httpsURLConnectionImpl52.getInstanceFollowRedirects();
        httpsURLConnectionImpl52.setChunkedStreamingMode(10);
        java.lang.String str59 = httpsURLConnectionImpl52.getHeaderFieldKey(402);
        boolean boolean60 = httpsURLConnectionImpl52.getUseCaches();
        httpsURLConnectionImpl52.setConnectTimeout(1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = httpsURLConnectionImpl52.getHeaderFields();
        java.lang.Class<?> wildcardClass64 = httpsURLConnectionImpl52.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass21, wildcardClass34, wildcardClass42, wildcardClass48, wildcardClass64 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = httpsURLConnectionImpl3.getContent(classArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(logger20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(hostnameVerifier26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(hostnameVerifier53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) -1);
        java.lang.String str11 = httpsURLConnectionImpl3.getRequestMethod();
        httpsURLConnectionImpl3.disconnect();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = httpsURLConnectionImpl3.getHeaderFields();
        long long14 = httpsURLConnectionImpl3.getDate();
        long long15 = httpsURLConnectionImpl3.getDate();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        int int11 = httpURLConnectionImpl5.getConnectTimeout();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState13 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState13);
        httpURLConnectionImpl5.setConnectTimeout((int) 'a');
        int int17 = httpURLConnectionImpl5.getConnectTimeout();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = httpURLConnectionImpl5.getHeaderField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + tunnelState13 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState13.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        int int13 = httpsURLConnectionImpl3.getHeaderFieldInt("hi!", 100);
        long long14 = httpsURLConnectionImpl3.getDate();
        boolean boolean15 = httpsURLConnectionImpl3.getDoInput();
        long long16 = httpsURLConnectionImpl3.getDate();
        long long19 = httpsURLConnectionImpl3.getHeaderFieldLong("{size=10 nkeys=1  {get} }", 410L);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 410L + "'", long19 == 410L);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        int int10 = httpURLConnectionImpl5.getReadTimeout();
        boolean boolean11 = httpURLConnectionImpl5.usingProxy();
        httpURLConnectionImpl5.setReadTimeout(402);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpClient httpClient3 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader4 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream9 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture8);
        messageHeader4.parseHeader(inputStream5);
        messageHeader4.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor15 = messageHeader4.multiValueIterator("");
        messageHeader4.add("GET", "GET");
        java.lang.String[] strArray23 = new java.lang.String[] { "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "", "content/unknown", "{size=10 nkeys=1  {hi!} }" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = messageHeader4.getHeaders(strArray23);
        messageHeader4.remove("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader4.add("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream30 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) httpCaptureInputStream2, httpClient3, messageHeader4);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream31 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream31.reset();
        posterOutputStream31.flush();
        posterOutputStream31.write(8192);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream36 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream36.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream38 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream38.flush();
        posterOutputStream36.writeTo((java.io.OutputStream) posterOutputStream38);
        com.quakearts.rest.client.net.HttpCapture httpCapture41 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream42 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream36, httpCapture41);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream43 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray44 = posterOutputStream43.toByteArray();
        byte[] byteArray45 = posterOutputStream43.toByteArray();
        httpCaptureOutputStream42.write(byteArray45);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream47 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray48 = posterOutputStream47.toByteArray();
        httpCaptureOutputStream42.write(byteArray48);
        posterOutputStream31.write(byteArray48);
        int int51 = chunkedInputStream30.read(byteArray48);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        long long3 = progressSource2.getExpected();
        java.lang.String str4 = progressSource2.getContentType();
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(progressSource2);
        java.net.URL uRL6 = progressSource2.getURL();
        java.nio.charset.CharsetEncoder charsetEncoder7 = com.quakearts.rest.client.net.ThreadLocalCoders.encoderFor((java.lang.Object) uRL6);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "content/unknown" + "'", str4, "content/unknown");
        org.junit.Assert.assertNull(uRL6);
        org.junit.Assert.assertNull(charsetEncoder7);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader0.set(406, "content/unknown", "hi!");
        messageHeader0.set(402, "GET", "");
        messageHeader0.set((int) (short) 1, "GET", "{size=10 nkeys=1  {hi!} }");
        java.lang.String str16 = messageHeader0.getValue(408);
        messageHeader0.add("\310", "AuthenticationHeader: prefer null");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        boolean boolean4 = progressSource3.connected();
        boolean boolean5 = progressSource3.connected();
        progressMonitor0.registerSource(progressSource3);
        com.quakearts.rest.client.net.ProgressSource progressSource7 = null;
        progressMonitor0.unregisterSource(progressSource7);
        com.quakearts.rest.client.net.ProgressMonitor.setDefault(progressMonitor0);
        java.net.URL uRL10 = null;
        boolean boolean12 = progressMonitor0.shouldMeterInput(uRL10, "{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray1 = posterOutputStream0.toByteArray();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream2 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream2.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture4 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream5 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream2, httpCapture4);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream6 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray7 = posterOutputStream6.toByteArray();
        httpCaptureOutputStream5.write(byteArray7);
        posterOutputStream0.write(byteArray7);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream10 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        com.quakearts.rest.client.net.MessageHeader messageHeader16 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str18 = messageHeader16.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader16.set(406, "content/unknown", "hi!");
        messageHeader16.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader39 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader16, (java.util.Set<java.lang.String>) strSet37);
        httpURLConnectionImpl5.authObj((java.lang.Object) "");
        httpURLConnectionImpl5.setRequestProperty("", "{size=10 nkeys=1  {hi!} }");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = httpURLConnectionImpl5.getRequestProperties();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        long long14 = httpsURLConnectionImpl3.getHeaderFieldDate("content/unknown", (long) (short) 100);
        httpsURLConnectionImpl3.setDoOutput(true);
        httpsURLConnectionImpl3.setDoInput(true);
        httpsURLConnectionImpl3.setReadTimeout(32);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setFixedLengthStreamingMode((long) 502);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Chunked encoding streaming mode set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getDoInput();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = httpsURLConnectionImpl3.getHeaderFieldInt("", 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue.setAuthCache((com.quakearts.rest.client.net.http.AuthCache) authCacheImpl0);
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue3 = null;
        authCacheImpl0.remove("", authCacheValue3);
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue7 = authCacheImpl0.get("\u2018", "AuthenticationHeader: prefer null");
        org.junit.Assert.assertNull(authCacheValue7);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentEncoding();
        boolean boolean13 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.setAllowUserInteraction(true);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler7 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl8 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL3, proxy4, httpHandler7);
        int int9 = httpURLConnectionImpl8.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState10 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl8.setTunnelState(tunnelState10);
        boolean boolean12 = httpURLConnectionImpl8.streaming();
        boolean boolean13 = httpURLConnectionImpl8.streaming();
        httpURLConnectionImpl8.setReadTimeout(414);
        java.net.URL uRL16 = httpURLConnectionImpl8.getURL();
        // The following exception was thrown during execution in test generation
        try {
            com.quakearts.rest.client.net.HttpClient httpClient17 = com.quakearts.rest.client.net.HttpClient.createNew(uRL0, proxy1, 403, httpURLConnectionImpl8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState10 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState10.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(uRL16);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long12 = httpsURLConnectionImpl6.getLastModified();
        httpsURLConnectionImpl6.setAllowUserInteraction(false);
        java.lang.String str15 = httpsURLConnectionImpl6.getContentEncoding();
        int int16 = httpsURLConnectionImpl6.getReadTimeout();
        boolean boolean17 = httpsURLConnectionImpl6.usingProxy();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream18 = httpsURLConnectionImpl6.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            meteredStream10.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Resetting to an invalid mark");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) -1);
        int int13 = httpsURLConnectionImpl3.getHeaderFieldInt("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = httpsURLConnectionImpl3.getResponseMessage();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        com.quakearts.rest.client.net.ProgressListener progressListener1 = null;
        progressMonitor0.removeProgressListener(progressListener1);
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList3 = progressMonitor0.getProgressSources();
        java.net.URL uRL4 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource6 = new com.quakearts.rest.client.net.ProgressSource(uRL4, "");
        long long7 = progressSource6.getProgress();
        progressSource6.setContentType("AuthenticationHeader: prefer null");
        java.net.URL uRL10 = progressSource6.getURL();
        progressMonitor0.unregisterSource(progressSource6);
        org.junit.Assert.assertNotNull(progressSourceList3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(uRL10);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        long long10 = httpsURLConnectionImpl3.getDate();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory();
        httpsURLConnectionImpl3.setSSLSocketFactory(sSLSocketFactory13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = httpsURLConnectionImpl3.getContent();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(sSLSocketFactory13);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        long long13 = httpsURLConnectionImpl3.getDate();
        httpsURLConnectionImpl3.setAllowUserInteraction(true);
        long long16 = httpsURLConnectionImpl3.getLastModified();
        httpsURLConnectionImpl3.setAllowUserInteraction(true);
        boolean boolean19 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean20 = httpsURLConnectionImpl3.getUseCaches();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(404);
        com.quakearts.rest.client.net.ProgressSource progressSource41 = null;
        com.quakearts.rest.client.net.MeteredStream meteredStream43 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) keepAliveStream36, progressSource41, (long) 32);
        com.quakearts.rest.client.net.HttpCapture httpCapture44 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream45 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture44);
        // The following exception was thrown during execution in test generation
        try {
            keepAliveStream36.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        long long14 = httpsURLConnectionImpl3.getHeaderFieldDate("content/unknown", (long) (short) 100);
        httpsURLConnectionImpl3.setDoOutput(true);
        httpsURLConnectionImpl3.disconnect();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        boolean boolean12 = httpsURLConnectionImpl3.getDefaultUseCaches();
        int int13 = httpsURLConnectionImpl3.getReadTimeout();
        java.lang.String str14 = httpsURLConnectionImpl3.getContentType();
        boolean boolean15 = httpsURLConnectionImpl3.getUseCaches();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.addRequestProperty("", "hi!");
        httpURLConnectionImpl5.setAuthenticationProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "{}");
        httpURLConnectionImpl5.addRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("GET");
        java.lang.String str4 = headerParser1.findValue("GET", "{size=10 nkeys=1  {get} }");
        java.lang.String str6 = headerParser1.findValue("content/unknown");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        progressSource2.finishTracking();
        progressSource2.close();
        boolean boolean15 = progressSource2.connected();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        boolean boolean1 = com.quakearts.rest.client.net.IPAddressUtil.isIPv6LiteralAddress("com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        boolean boolean12 = httpsURLConnectionImpl3.getDefaultUseCaches();
        int int13 = httpsURLConnectionImpl3.getReadTimeout();
        long long16 = httpsURLConnectionImpl3.getHeaderFieldDate("hi!", (long) 408);
        long long17 = httpsURLConnectionImpl3.getExpiration();
        int int18 = httpsURLConnectionImpl3.getContentLength();
        // The following exception was thrown during execution in test generation
        try {
            java.security.Permission permission19 = httpsURLConnectionImpl3.getPermission();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 408L + "'", long16 == 408L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream8 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource5, (long) (short) 0);
        java.lang.String str9 = progressSource5.getContentType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "content/unknown" + "'", str9, "content/unknown");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        boolean boolean3 = progressSource2.connected();
        boolean boolean4 = progressSource2.connected();
        java.net.URL uRL5 = progressSource2.getURL();
        progressSource2.beginTracking();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(uRL5);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        long long11 = httpsURLConnectionImpl3.getHeaderFieldDate("hi!", (long) 206);
        httpsURLConnectionImpl3.setUseCaches(true);
        boolean boolean14 = httpsURLConnectionImpl3.getDefaultUseCaches();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 206L + "'", long11 == 206L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.setReadTimeout(415);
        httpsURLConnectionImpl6.setAllowUserInteraction(true);
        httpsURLConnectionImpl6.setDoOutput(false);
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setChunkedStreamingMode(408);
        java.lang.Class[] classArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = httpsURLConnectionImpl3.getContent(classArray8);
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        java.net.URL uRL6 = null;
        java.net.Proxy proxy7 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler8 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl9 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL6, proxy7, httpsHandler8);
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = httpsURLConnectionImpl9.getHostnameVerifier();
        boolean boolean11 = httpsURLConnectionImpl9.getDoInput();
        httpsURLConnectionImpl9.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream14 = httpsURLConnectionImpl9.getErrorStream();
        java.net.URL uRL15 = httpsURLConnectionImpl9.getURL();
        boolean boolean16 = httpsURLConnectionImpl9.getDoInput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = httpsURLConnectionImpl9.getRequestProperties();
        httpURLConnectionImpl5.authObj((java.lang.Object) httpsURLConnectionImpl9);
        java.net.URL uRL19 = httpsURLConnectionImpl9.getURL();
        httpsURLConnectionImpl9.setInstanceFollowRedirects(false);
        httpsURLConnectionImpl9.setReadTimeout(205);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl9.setRequestMethod("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: Invalid HTTP method: com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(inputStream14);
        org.junit.Assert.assertNull(uRL15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(uRL19);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpClient httpClient42 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader43 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str45 = messageHeader43.getValue(503);
        messageHeader43.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient42, messageHeader43);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream50 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream50.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture52 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream53 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream50, httpCapture52);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream54 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray55 = posterOutputStream54.toByteArray();
        httpCaptureOutputStream53.write(byteArray55);
        com.quakearts.rest.client.net.HttpCapture httpCapture57 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream58 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) httpCaptureOutputStream53, httpCapture57);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream59 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream59.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture61 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream62 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream59, httpCapture61);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream63 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray64 = posterOutputStream63.toByteArray();
        byte[] byteArray65 = posterOutputStream63.toByteArray();
        posterOutputStream63.close();
        posterOutputStream63.write(405);
        posterOutputStream63.write((int) '#');
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream71 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream71.reset();
        posterOutputStream71.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream74 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray75 = posterOutputStream74.toByteArray();
        byte[] byteArray76 = posterOutputStream74.toByteArray();
        posterOutputStream71.write(byteArray76);
        posterOutputStream63.write(byteArray76, 204, (int) '4');
        posterOutputStream59.write(byteArray76);
        httpCaptureOutputStream53.write(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = chunkedInputStream49.read(byteArray76, 0, 403);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("GET");
        java.lang.String str2 = headerParser1.toString();
        java.util.Iterator<java.lang.String> strItor3 = headerParser1.values();
        int int6 = headerParser1.findInt("content/unknown", (int) (short) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{size=10 nkeys=1  {get} }" + "'", str2, "{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.lang.Boolean boolean1 = com.quakearts.rest.client.net.NetProperties.getBoolean("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        long long12 = httpsURLConnectionImpl3.getContentLengthLong();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream13 = httpsURLConnectionImpl3.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long12 = httpsURLConnectionImpl6.getLastModified();
        httpsURLConnectionImpl6.setAllowUserInteraction(false);
        java.lang.String str15 = httpsURLConnectionImpl6.getContentEncoding();
        int int16 = httpsURLConnectionImpl6.getReadTimeout();
        boolean boolean17 = httpsURLConnectionImpl6.usingProxy();
        int int20 = httpsURLConnectionImpl6.getHeaderFieldInt("content/unknown", (int) '4');
        httpsURLConnectionImpl6.setReadTimeout(503);
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        boolean boolean10 = httpsURLConnectionImpl3.getDoInput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getRequestProperties();
        java.lang.String str13 = httpsURLConnectionImpl3.getHeaderField("{size=10 nkeys=1  {get} }");
        boolean boolean14 = httpsURLConnectionImpl3.getUseCaches();
        httpsURLConnectionImpl3.disconnect();
        long long16 = httpsURLConnectionImpl3.getContentLengthLong();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        java.lang.String str4 = progressSource2.getContentType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "content/unknown" + "'", str4, "content/unknown");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        boolean boolean4 = progressSource3.connected();
        boolean boolean5 = progressSource3.connected();
        progressMonitor0.registerSource(progressSource3);
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList7 = progressMonitor0.getProgressSources();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(progressSourceList7);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpClient httpClient3 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader4 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream9 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture8);
        messageHeader4.parseHeader(inputStream5);
        messageHeader4.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor15 = messageHeader4.multiValueIterator("");
        messageHeader4.add("GET", "GET");
        java.lang.String[] strArray23 = new java.lang.String[] { "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "", "content/unknown", "{size=10 nkeys=1  {hi!} }" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = messageHeader4.getHeaders(strArray23);
        messageHeader4.remove("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader4.add("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream30 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) httpCaptureInputStream2, httpClient3, messageHeader4);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream31 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream31.reset();
        posterOutputStream31.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream34 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray35 = posterOutputStream34.toByteArray();
        byte[] byteArray36 = posterOutputStream34.toByteArray();
        posterOutputStream31.write(byteArray36);
        byte[] byteArray38 = posterOutputStream31.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = httpCaptureInputStream2.read(byteArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getExpected();
        com.quakearts.rest.client.net.ProgressSource.State state14 = progressEvent12.getState();
        java.lang.String str15 = progressEvent12.getContentType();
        long long16 = progressEvent12.getExpected();
        java.lang.String str17 = progressEvent12.toString();
        java.lang.String str18 = progressEvent12.getContentType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(state14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str15, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]" + "'", str17, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str18, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        java.lang.String str3 = headerParser1.findKey(305);
        int int6 = headerParser1.findInt("hi!", 32);
        java.lang.String str8 = headerParser1.findValue(406);
        java.lang.String str11 = headerParser1.findValue("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {get} }");
        java.util.Iterator<java.lang.String> strItor12 = headerParser1.values();
        java.lang.String str14 = headerParser1.findValue("content/unknown");
        int int17 = headerParser1.findInt("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", 203);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{size=10 nkeys=1  {get} }" + "'", str11, "{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 203 + "'", int17 == 203);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        int int11 = httpURLConnectionImpl5.getConnectTimeout();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState13 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState13);
        httpURLConnectionImpl5.setConnectTimeout((int) 'a');
        int int17 = httpURLConnectionImpl5.getConnectTimeout();
        java.nio.charset.CharsetEncoder charsetEncoder18 = com.quakearts.rest.client.net.ThreadLocalCoders.encoderFor((java.lang.Object) httpURLConnectionImpl5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + tunnelState13 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState13.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNull(charsetEncoder18);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long12 = httpsURLConnectionImpl6.getLastModified();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = httpsURLConnectionImpl6.getContent();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        boolean boolean10 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean11 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.setDefaultUseCaches(false);
        java.lang.String str15 = httpsURLConnectionImpl3.getRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]");
        httpsURLConnectionImpl3.setConnectTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        // The following exception was thrown during execution in test generation
        try {
            meteredStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long12 = httpsURLConnectionImpl6.getLastModified();
        int int13 = httpsURLConnectionImpl6.getConnectTimeout();
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream3 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray4 = posterOutputStream3.toByteArray();
        byte[] byteArray5 = posterOutputStream3.toByteArray();
        posterOutputStream0.write(byteArray5);
        byte[] byteArray7 = posterOutputStream0.toByteArray();
        byte[] byteArray8 = posterOutputStream0.toByteArray();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setDoOutput(true);
        httpsURLConnectionImpl3.setRequestProperty("hi!", "");
        httpsURLConnectionImpl3.setReadTimeout((int) (short) 100);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = httpsURLConnectionImpl3.getSSLSocketFactory();
        java.lang.String str15 = httpsURLConnectionImpl3.getRequestProperty("\310");
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long12 = httpsURLConnectionImpl6.getLastModified();
        httpsURLConnectionImpl6.setAllowUserInteraction(false);
        java.lang.String str15 = httpsURLConnectionImpl6.getContentEncoding();
        httpsURLConnectionImpl6.setDoOutput(false);
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(413);
        long long20 = httpsURLConnectionImpl6.getIfModifiedSince();
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue3 = authCacheImpl0.get("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        com.quakearts.rest.client.net.http.AuthCacheValue.setAuthCache((com.quakearts.rest.client.net.http.AuthCache) authCacheImpl0);
        com.quakearts.rest.client.net.http.AuthCacheValue.setAuthCache((com.quakearts.rest.client.net.http.AuthCache) authCacheImpl0);
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue7 = null;
        // The following exception was thrown during execution in test generation
        try {
            authCacheImpl0.put("com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null", authCacheValue7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(authCacheValue3);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        java.lang.String str3 = headerParser1.findKey(305);
        int int6 = headerParser1.findInt("hi!", 32);
        java.lang.String str8 = headerParser1.findValue(406);
        java.lang.String str11 = headerParser1.findValue("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {get} }");
        // The following exception was thrown during execution in test generation
        try {
            com.quakearts.rest.client.net.HeaderParser headerParser14 = headerParser1.subsequence((int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid start or end");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{size=10 nkeys=1  {get} }" + "'", str11, "{size=10 nkeys=1  {get} }");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.net.URLConnection.setDefaultRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]", "");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        httpsURLConnectionImpl3.setUseCaches(true);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(412);
        long long10 = httpsURLConnectionImpl3.getHeaderFieldDate("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", 100L);
        java.net.URL uRL11 = httpsURLConnectionImpl3.getURL();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNull(uRL11);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setConnectTimeout((int) ' ');
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.setIfModifiedSince(100L);
        httpsURLConnectionImpl6.setDefaultUseCaches(false);
        boolean boolean16 = httpsURLConnectionImpl6.getDoOutput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = httpsURLConnectionImpl6.getRequestProperties();
        httpsURLConnectionImpl6.setRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
        boolean boolean21 = httpsURLConnectionImpl6.getDefaultUseCaches();
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.getValue(503);
        messageHeader0.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        java.lang.String str7 = messageHeader0.getValue(0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{size=10 nkeys=1  {hi!} }" + "'", str7, "{size=10 nkeys=1  {hi!} }");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor2 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        progressMonitor2.registerSource(progressSource5);
        progressMonitor0.unregisterSource(progressSource5);
        java.lang.String str9 = progressSource5.toString();
        java.net.URL uRL10 = null;
        com.quakearts.rest.client.net.ProgressSource.State state13 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent16 = new com.quakearts.rest.client.net.ProgressEvent(progressSource5, uRL10, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]", state13, (long) 406, (long) '#');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str9, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpClient httpClient42 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader43 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str45 = messageHeader43.getValue(503);
        messageHeader43.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient42, messageHeader43);
        com.quakearts.rest.client.net.HttpCapture httpCapture50 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream51 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) meteredStream10, httpCapture50);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream52 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray53 = posterOutputStream52.toByteArray();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream54 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream54.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture56 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream57 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream54, httpCapture56);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream58 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray59 = posterOutputStream58.toByteArray();
        httpCaptureOutputStream57.write(byteArray59);
        posterOutputStream52.write(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = httpCaptureInputStream51.read(byteArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setUseCaches(false);
        boolean boolean8 = httpsURLConnectionImpl3.getDoOutput();
        boolean boolean9 = httpsURLConnectionImpl3.getDefaultUseCaches();
        java.io.InputStream inputStream10 = httpsURLConnectionImpl3.getErrorStream();
        httpsURLConnectionImpl3.setDefaultUseCaches(false);
        // The following exception was thrown during execution in test generation
        try {
            java.security.cert.Certificate[] certificateArray13 = httpsURLConnectionImpl3.getLocalCertificates();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: connection not yet open");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        java.net.URL uRL27 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource29 = new com.quakearts.rest.client.net.ProgressSource(uRL27, "");
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(progressSource29);
        com.quakearts.rest.client.net.MeteredStream meteredStream32 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource29, (long) 505);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = meteredStream32.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpCapture httpCapture42 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream43 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) meteredStream10, httpCapture42);
        java.net.URL uRL44 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource46 = new com.quakearts.rest.client.net.ProgressSource(uRL44, "");
        progressSource46.close();
        progressSource46.close();
        com.quakearts.rest.client.net.MeteredStream meteredStream50 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource46, (long) 501);
        progressSource46.finishTracking();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        httpsURLConnectionImpl3.setIfModifiedSince((long) (byte) 100);
        httpsURLConnectionImpl3.setUseCaches(false);
        int int16 = httpsURLConnectionImpl3.getContentLength();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.getValue(503);
        java.lang.String str4 = messageHeader0.getValue(406);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(progressSource2);
        java.net.URL uRL4 = null;
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor7 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int8 = progressMonitor7.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor9 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL10 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource12 = new com.quakearts.rest.client.net.ProgressSource(uRL10, "");
        long long13 = progressSource12.getExpected();
        progressMonitor9.registerSource(progressSource12);
        progressMonitor7.unregisterSource(progressSource12);
        com.quakearts.rest.client.net.ProgressListener progressListener16 = null;
        progressMonitor7.removeProgressListener(progressListener16);
        java.io.InputStream inputStream18 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture19 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream20 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream18, httpCapture19);
        com.quakearts.rest.client.net.HttpCapture httpCapture21 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream22 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream18, httpCapture21);
        java.net.URL uRL23 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource25 = new com.quakearts.rest.client.net.ProgressSource(uRL23, "");
        long long26 = progressSource25.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream28 = new com.quakearts.rest.client.net.MeteredStream(inputStream18, progressSource25, (long) (byte) 1);
        progressMonitor7.updateProgress(progressSource25);
        com.quakearts.rest.client.net.ProgressSource.State state30 = progressSource25.getState();
        com.quakearts.rest.client.net.ProgressEvent progressEvent33 = new com.quakearts.rest.client.net.ProgressEvent(progressSource3, uRL4, "", "", state30, (long) (short) 1, 10L);
        java.lang.Object obj34 = progressEvent33.getSource();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.CONNECTED + "'", state30.equals(com.quakearts.rest.client.net.ProgressSource.State.CONNECTED));
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentEncoding();
        boolean boolean13 = httpsURLConnectionImpl3.getAllowUserInteraction();
        boolean boolean14 = httpsURLConnectionImpl3.getDoInput();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray1 = posterOutputStream0.toByteArray();
        byte[] byteArray2 = posterOutputStream0.toByteArray();
        posterOutputStream0.close();
        posterOutputStream0.close();
        java.lang.String str5 = posterOutputStream0.toString();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(401);
        keepAliveStream36.mark(300);
        boolean boolean42 = keepAliveStream36.markSupported();
        byte[] byteArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = keepAliveStream36.read(byteArray43, 8192, 501);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        boolean boolean42 = chunkedInputStream41.hurry();
        boolean boolean43 = chunkedInputStream41.markSupported();
        java.lang.String str44 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) chunkedInputStream41);
        boolean boolean45 = chunkedInputStream41.hurry();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream46 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream46.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream48 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream48.flush();
        posterOutputStream46.writeTo((java.io.OutputStream) posterOutputStream48);
        com.quakearts.rest.client.net.HttpCapture httpCapture51 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream52 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream46, httpCapture51);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream53 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray54 = posterOutputStream53.toByteArray();
        byte[] byteArray55 = posterOutputStream53.toByteArray();
        httpCaptureOutputStream52.write(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = chunkedInputStream41.read(byteArray55, 10, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray1 = posterOutputStream0.toByteArray();
        java.lang.String str2 = posterOutputStream0.toString();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        boolean boolean42 = chunkedInputStream41.hurry();
        boolean boolean43 = chunkedInputStream41.markSupported();
        java.lang.String str44 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) chunkedInputStream41);
        // The following exception was thrown during execution in test generation
        try {
            chunkedInputStream41.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        com.quakearts.rest.client.net.MessageHeader messageHeader16 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str18 = messageHeader16.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader16.set(406, "content/unknown", "hi!");
        messageHeader16.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader39 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader16, (java.util.Set<java.lang.String>) strSet37);
        httpURLConnectionImpl5.authObj((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.connect();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        keepAliveStream36.mark(504);
        com.quakearts.rest.client.net.HttpCapture httpCapture39 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream40 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture39);
        com.quakearts.rest.client.net.HttpClient httpClient41 = null;
        java.io.InputStream inputStream42 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture43 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream44 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream42, httpCapture43);
        com.quakearts.rest.client.net.HttpCapture httpCapture45 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream46 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream42, httpCapture45);
        java.net.URL uRL47 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource49 = new com.quakearts.rest.client.net.ProgressSource(uRL47, "");
        long long50 = progressSource49.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream52 = new com.quakearts.rest.client.net.MeteredStream(inputStream42, progressSource49, (long) (byte) 1);
        java.net.URL uRL53 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource55 = new com.quakearts.rest.client.net.ProgressSource(uRL53, "");
        progressSource55.close();
        boolean boolean57 = progressSource55.connected();
        progressSource55.finishTracking();
        java.net.URL uRL59 = null;
        com.quakearts.rest.client.net.ProgressSource.State state62 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent65 = new com.quakearts.rest.client.net.ProgressEvent(progressSource55, uRL59, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state62, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource66 = new com.quakearts.rest.client.net.ProgressSource(progressSource55);
        com.quakearts.rest.client.net.MeteredStream meteredStream68 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream52, progressSource55, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor69 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL70 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource72 = new com.quakearts.rest.client.net.ProgressSource(uRL70, "");
        long long73 = progressSource72.getExpected();
        progressMonitor69.registerSource(progressSource72);
        java.lang.String str75 = progressSource72.toString();
        com.quakearts.rest.client.net.HttpClient httpClient77 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream78 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream52, progressSource72, (long) 203, httpClient77);
        com.quakearts.rest.client.net.HttpClient httpClient79 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader80 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str82 = messageHeader80.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream83 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream52, httpClient79, messageHeader80);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream84 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) keepAliveStream36, httpClient41, messageHeader80);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str75, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setDoOutput(true);
        boolean boolean8 = httpsURLConnectionImpl3.getAllowUserInteraction();
        long long9 = httpsURLConnectionImpl3.getIfModifiedSince();
        httpsURLConnectionImpl3.setDoInput(false);
        boolean boolean12 = httpsURLConnectionImpl3.usingProxy();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        java.lang.String str5 = messageHeader1.getValue((int) (byte) -1);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader6 = new com.quakearts.rest.client.net.http.AuthenticationHeader("{size=10 nkeys=1  {hi!} }", messageHeader1);
        messageHeader1.set(200, "com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null", "{}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        java.lang.String str3 = headerParser1.findKey(305);
        java.lang.String str4 = headerParser1.toString();
        java.util.Iterator<java.lang.String> strItor5 = headerParser1.values();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{size=10 nkeys=1  {hi!} }" + "'", str4, "{size=10 nkeys=1  {hi!} }");
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.io.InputStream inputStream15 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean16 = httpURLConnectionImpl5.usingProxy();
        httpURLConnectionImpl5.setConnectTimeout(206);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = httpURLConnectionImpl5.getHeaderField(502);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNull(inputStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        long long10 = httpsURLConnectionImpl3.getDate();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 402);
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = httpsURLConnectionImpl3.getHostnameVerifier();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(hostnameVerifier13);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        boolean boolean4 = progressSource3.connected();
        boolean boolean5 = progressSource3.connected();
        progressMonitor0.registerSource(progressSource3);
        long long7 = progressSource3.getExpected();
        com.quakearts.rest.client.net.ProgressSource progressSource8 = new com.quakearts.rest.client.net.ProgressSource(progressSource3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader1.set(406, "content/unknown", "hi!");
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader8 = new com.quakearts.rest.client.net.http.AuthenticationHeader("content/unknown", messageHeader1);
        java.lang.String str10 = messageHeader1.getValue(0);
        java.lang.String str12 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        java.lang.String str14 = messageHeader1.findValue("{}");
        messageHeader1.prepend("{}", "hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        long long4 = progressSource3.getExpected();
        progressMonitor0.registerSource(progressSource3);
        java.lang.String str6 = progressSource3.getContentType();
        java.net.URL uRL7 = null;
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor10 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        long long14 = progressSource13.getExpected();
        progressMonitor10.registerSource(progressSource13);
        java.lang.String str16 = progressSource13.toString();
        java.net.URL uRL17 = null;
        java.net.URL uRL20 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource22 = new com.quakearts.rest.client.net.ProgressSource(uRL20, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.net.URL uRL23 = null;
        com.quakearts.rest.client.net.ProgressSource.State state26 = com.quakearts.rest.client.net.ProgressSource.State.UPDATE;
        com.quakearts.rest.client.net.ProgressEvent progressEvent29 = new com.quakearts.rest.client.net.ProgressEvent(progressSource22, uRL23, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state26, (long) 501, (long) 304);
        java.net.URL uRL30 = null;
        com.quakearts.rest.client.net.ProgressSource.State state33 = com.quakearts.rest.client.net.ProgressSource.State.NEW;
        com.quakearts.rest.client.net.ProgressEvent progressEvent36 = new com.quakearts.rest.client.net.ProgressEvent(progressSource22, uRL30, "hi!", "GET", state33, 1L, (long) 408);
        com.quakearts.rest.client.net.ProgressEvent progressEvent39 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "content/unknown", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state33, (long) 504, (long) (byte) 100);
        java.net.URL uRL40 = null;
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor43 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int44 = progressMonitor43.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor45 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL46 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource48 = new com.quakearts.rest.client.net.ProgressSource(uRL46, "");
        long long49 = progressSource48.getExpected();
        progressMonitor45.registerSource(progressSource48);
        progressMonitor43.unregisterSource(progressSource48);
        com.quakearts.rest.client.net.ProgressListener progressListener52 = null;
        progressMonitor43.removeProgressListener(progressListener52);
        java.io.InputStream inputStream54 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture55 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream56 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream54, httpCapture55);
        com.quakearts.rest.client.net.HttpCapture httpCapture57 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream58 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream54, httpCapture57);
        java.net.URL uRL59 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource61 = new com.quakearts.rest.client.net.ProgressSource(uRL59, "");
        long long62 = progressSource61.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream64 = new com.quakearts.rest.client.net.MeteredStream(inputStream54, progressSource61, (long) (byte) 1);
        progressMonitor43.updateProgress(progressSource61);
        com.quakearts.rest.client.net.ProgressSource.State state66 = progressSource61.getState();
        com.quakearts.rest.client.net.ProgressEvent progressEvent69 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL40, "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state66, (long) 402, (long) 301);
        com.quakearts.rest.client.net.ProgressEvent progressEvent72 = new com.quakearts.rest.client.net.ProgressEvent(progressSource3, uRL7, "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]", state66, (long) 415, (long) (short) 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "content/unknown" + "'", str6, "content/unknown");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str16, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.UPDATE + "'", state26.equals(com.quakearts.rest.client.net.ProgressSource.State.UPDATE));
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state33.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8192 + "'", int44 == 8192);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.CONNECTED + "'", state66.equals(com.quakearts.rest.client.net.ProgressSource.State.CONNECTED));
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        httpsURLConnectionImpl5.setUseCaches(false);
        long long21 = httpsURLConnectionImpl5.getHeaderFieldLong("", (long) 304);
        long long22 = httpsURLConnectionImpl5.getDate();
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 304L + "'", long21 == 304L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.io.InputStream inputStream15 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean16 = httpURLConnectionImpl5.usingProxy();
        httpURLConnectionImpl5.setDoOutput(false);
        httpURLConnectionImpl5.disconnect();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = httpURLConnectionImpl5.getResponseCode();
            org.junit.Assert.fail("Expected exception of type com.quakearts.rest.client.exception.HttpClientRuntimeException; message: java.lang.NullPointerException");
        } catch (com.quakearts.rest.client.exception.HttpClientRuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNull(inputStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.lang.String str3 = progressSource2.getMethod();
        progressSource2.setContentType("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        long long6 = progressSource2.getExpected();
        long long7 = progressSource2.getExpected();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str3, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        com.quakearts.rest.client.net.KeepAliveCache keepAliveCache0 = new com.quakearts.rest.client.net.KeepAliveCache();
        java.util.Optional<com.quakearts.rest.client.net.RegisteredDomainProducer.RegisteredDomain> registeredDomainOptional2 = com.quakearts.rest.client.net.RegisteredDomainProducer.RegisteredDomain.from("");
        boolean boolean3 = keepAliveCache0.equals((java.lang.Object) registeredDomainOptional2);
        com.quakearts.rest.client.net.HeaderParser headerParser5 = new com.quakearts.rest.client.net.HeaderParser("GET");
        boolean boolean6 = keepAliveCache0.containsValue((java.lang.Object) headerParser5);
        int int7 = keepAliveCache0.size();
        org.junit.Assert.assertNotNull(registeredDomainOptional2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue3 = authCacheImpl0.get("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue5 = null;
        authCacheImpl0.remove("", authCacheValue5);
        org.junit.Assert.assertNull(authCacheValue3);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor2 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        progressMonitor2.registerSource(progressSource5);
        progressMonitor0.unregisterSource(progressSource5);
        com.quakearts.rest.client.net.ProgressListener progressListener9 = null;
        progressMonitor0.removeProgressListener(progressListener9);
        java.io.InputStream inputStream11 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream13 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture12);
        com.quakearts.rest.client.net.HttpCapture httpCapture14 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream15 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture14);
        java.net.URL uRL16 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource18 = new com.quakearts.rest.client.net.ProgressSource(uRL16, "");
        long long19 = progressSource18.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream21 = new com.quakearts.rest.client.net.MeteredStream(inputStream11, progressSource18, (long) (byte) 1);
        progressMonitor0.updateProgress(progressSource18);
        progressSource18.beginTracking();
        java.net.URL uRL24 = null;
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        java.net.URL uRL34 = null;
        java.net.URL uRL37 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource39 = new com.quakearts.rest.client.net.ProgressSource(uRL37, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.net.URL uRL40 = null;
        com.quakearts.rest.client.net.ProgressSource.State state43 = com.quakearts.rest.client.net.ProgressSource.State.UPDATE;
        com.quakearts.rest.client.net.ProgressEvent progressEvent46 = new com.quakearts.rest.client.net.ProgressEvent(progressSource39, uRL40, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state43, (long) 501, (long) 304);
        java.net.URL uRL47 = null;
        com.quakearts.rest.client.net.ProgressSource.State state50 = com.quakearts.rest.client.net.ProgressSource.State.NEW;
        com.quakearts.rest.client.net.ProgressEvent progressEvent53 = new com.quakearts.rest.client.net.ProgressEvent(progressSource39, uRL47, "hi!", "GET", state50, 1L, (long) 408);
        com.quakearts.rest.client.net.ProgressEvent progressEvent56 = new com.quakearts.rest.client.net.ProgressEvent(progressSource30, uRL34, "content/unknown", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state50, (long) 504, (long) (byte) 100);
        com.quakearts.rest.client.net.ProgressEvent progressEvent59 = new com.quakearts.rest.client.net.ProgressEvent(progressSource18, uRL24, "p4", "hi!", state50, 100L, (long) 412);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.UPDATE + "'", state43.equals(com.quakearts.rest.client.net.ProgressSource.State.UPDATE));
        org.junit.Assert.assertTrue("'" + state50 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state50.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = httpsURLConnectionImpl3.getSSLSocketFactory();
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        boolean boolean13 = httpsURLConnectionImpl3.getUseCaches();
        long long16 = httpsURLConnectionImpl3.getHeaderFieldLong("{size=10 nkeys=1  {get} }", 0L);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean6 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) 'a');
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setConnectTimeout((int) ' ');
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.setIfModifiedSince(100L);
        httpsURLConnectionImpl6.setDefaultUseCaches(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = httpsURLConnectionImpl6.getContent();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        int int13 = httpsURLConnectionImpl3.getHeaderFieldInt("hi!", 100);
        int int14 = httpsURLConnectionImpl3.getReadTimeout();
        httpsURLConnectionImpl3.setConnectTimeout((int) 'a');
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        int int13 = httpsURLConnectionImpl3.getHeaderFieldInt("hi!", 100);
        int int14 = httpsURLConnectionImpl3.getReadTimeout();
        int int15 = httpsURLConnectionImpl3.getReadTimeout();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory();
        httpsURLConnectionImpl3.setSSLSocketFactory(sSLSocketFactory10);
        boolean boolean12 = httpsURLConnectionImpl3.getDoInput();
        // The following exception was thrown during execution in test generation
        try {
            java.security.Permission permission13 = httpsURLConnectionImpl3.getPermission();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream2 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream2.flush();
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream2);
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream6 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture5);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray8 = posterOutputStream7.toByteArray();
        byte[] byteArray9 = posterOutputStream7.toByteArray();
        httpCaptureOutputStream6.write(byteArray9);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream11 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream11.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream13 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream13.reset();
        posterOutputStream13.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream16 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray17 = posterOutputStream16.toByteArray();
        byte[] byteArray18 = posterOutputStream16.toByteArray();
        posterOutputStream13.write(byteArray18);
        posterOutputStream11.write(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream6.write(byteArray18, 400, 505);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 400");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpClient httpClient42 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader43 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str45 = messageHeader43.getValue(503);
        messageHeader43.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient42, messageHeader43);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = meteredStream10.skip((long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray5 = posterOutputStream4.toByteArray();
        httpCaptureOutputStream3.write(byteArray5);
        com.quakearts.rest.client.net.HttpCapture httpCapture7 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream8 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) httpCaptureOutputStream3, httpCapture7);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream9 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray10 = posterOutputStream9.toByteArray();
        httpCaptureOutputStream3.write(byteArray10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        boolean boolean3 = progressSource2.connected();
        progressSource2.beginTracking();
        java.lang.String str5 = progressSource2.getMethod();
        boolean boolean6 = progressSource2.connected();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        int int10 = httpURLConnectionImpl5.getReadTimeout();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream11 = httpURLConnectionImpl5.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setRequestProperty("", "\000");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean13 = httpURLConnectionImpl5.usingProxy();
        boolean boolean14 = httpURLConnectionImpl5.streaming();
        java.lang.Object obj15 = httpURLConnectionImpl5.authObj();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        long long10 = httpsURLConnectionImpl3.getDate();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 402);
        httpsURLConnectionImpl3.setReadTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        com.quakearts.rest.client.net.MessageHeader messageHeader16 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str18 = messageHeader16.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader16.set(406, "content/unknown", "hi!");
        messageHeader16.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader39 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader16, (java.util.Set<java.lang.String>) strSet37);
        httpURLConnectionImpl5.authObj((java.lang.Object) "");
        httpURLConnectionImpl5.setRequestProperty("", "{size=10 nkeys=1  {hi!} }");
        httpURLConnectionImpl5.setConnectTimeout(407);
        httpURLConnectionImpl5.setReadTimeout((int) (short) 1);
        java.lang.String str49 = httpURLConnectionImpl5.getRequestProperty("{size=10 nkeys=1  {hi!} }");
        boolean boolean50 = httpURLConnectionImpl5.usingProxy();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(401);
        keepAliveStream36.mark(300);
        boolean boolean42 = keepAliveStream36.markSupported();
        boolean boolean43 = keepAliveStream36.markSupported();
        boolean boolean44 = keepAliveStream36.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = keepAliveStream36.hurry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = httpsURLConnectionImpl3.getContentType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream2 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream2.flush();
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream2);
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream6 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture5);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray8 = posterOutputStream7.toByteArray();
        byte[] byteArray9 = posterOutputStream7.toByteArray();
        httpCaptureOutputStream6.write(byteArray9);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream11 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream11.reset();
        posterOutputStream11.flush();
        posterOutputStream11.write(8192);
        byte[] byteArray16 = posterOutputStream11.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream6.write(byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0]");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream2 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream2, httpCapture3);
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream6 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream2, httpCapture5);
        messageHeader1.parseHeader(inputStream2);
        messageHeader1.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor12 = messageHeader1.multiValueIterator("");
        messageHeader1.add("GET", "GET");
        com.quakearts.rest.client.net.MessageHeader messageHeader17 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str19 = messageHeader17.getValue(503);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = messageHeader17.getHeaders();
        messageHeader17.set("{size=10 nkeys=1  {hi!} }", "content/unknown");
        java.lang.String str25 = messageHeader17.getValue(0);
        com.quakearts.rest.client.net.MessageHeader messageHeader27 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str29 = messageHeader27.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader27.set(406, "content/unknown", "hi!");
        messageHeader27.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray47 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader50 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader27, (java.util.Set<java.lang.String>) strSet48);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader51 = new com.quakearts.rest.client.net.http.AuthenticationHeader("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", messageHeader17, (java.util.Set<java.lang.String>) strSet48);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader52 = new com.quakearts.rest.client.net.http.AuthenticationHeader("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", messageHeader1, (java.util.Set<java.lang.String>) strSet48);
        java.lang.String str54 = messageHeader1.findValue("\000");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "content/unknown" + "'", str25, "content/unknown");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream2 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream2.flush();
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream2);
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream6 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture5);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray8 = posterOutputStream7.toByteArray();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream9 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream9.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture11 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream12 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream9, httpCapture11);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream13 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray14 = posterOutputStream13.toByteArray();
        httpCaptureOutputStream12.write(byteArray14);
        posterOutputStream7.write(byteArray14);
        httpCaptureOutputStream6.write(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream6.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue3 = authCacheImpl0.get("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        com.quakearts.rest.client.net.http.AuthCacheValue.setAuthCache((com.quakearts.rest.client.net.http.AuthCache) authCacheImpl0);
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue6 = null;
        authCacheImpl0.remove("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]", authCacheValue6);
        org.junit.Assert.assertNull(authCacheValue3);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        com.quakearts.rest.client.net.http.HttpHandler httpHandler2 = new com.quakearts.rest.client.net.http.HttpHandler("{size=10 nkeys=1  {get} }", 8192);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader1.set(406, "content/unknown", "hi!");
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader8 = new com.quakearts.rest.client.net.http.AuthenticationHeader("content/unknown", messageHeader1);
        com.quakearts.rest.client.net.MessageHeader messageHeader9 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str11 = messageHeader9.getValue(503);
        messageHeader9.add("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray19 = new java.lang.String[] { "", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = messageHeader9.getHeaders(strArray19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = messageHeader1.getHeaders(strArray19);
        messageHeader1.setIfNotSet("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
        java.io.PrintStream printStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            messageHeader1.print(printStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList2 = progressMonitor0.getProgressSources();
        com.quakearts.rest.client.net.ProgressListener progressListener3 = null;
        progressMonitor0.removeProgressListener(progressListener3);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(progressSourceList2);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream4.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream7 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream4, httpCapture6);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream8 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray9 = posterOutputStream8.toByteArray();
        httpCaptureOutputStream7.write(byteArray9);
        httpCaptureOutputStream3.write(byteArray9);
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream13 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) httpCaptureOutputStream3, httpCapture12);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = messageHeader0.getHeaders();
        java.util.Iterator<java.lang.String> strItor3 = messageHeader0.multiValueIterator("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
        com.quakearts.rest.client.net.MessageHeader messageHeader4 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream9 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture8);
        messageHeader4.parseHeader(inputStream5);
        messageHeader4.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor15 = messageHeader4.multiValueIterator("");
        messageHeader4.add("GET", "GET");
        java.lang.String[] strArray23 = new java.lang.String[] { "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "", "content/unknown", "{size=10 nkeys=1  {hi!} }" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = messageHeader4.getHeaders(strArray23);
        com.quakearts.rest.client.net.MessageHeader messageHeader25 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream26 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture27 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream28 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream26, httpCapture27);
        com.quakearts.rest.client.net.HttpCapture httpCapture29 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream30 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream26, httpCapture29);
        messageHeader25.parseHeader(inputStream26);
        messageHeader25.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor36 = messageHeader25.multiValueIterator("");
        messageHeader25.add("GET", "GET");
        java.lang.String[] strArray44 = new java.lang.String[] { "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "", "content/unknown", "{size=10 nkeys=1  {hi!} }" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = messageHeader25.getHeaders(strArray44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = messageHeader0.filterAndAddHeaders(strArray23, strMap45);
        java.lang.String str48 = messageHeader0.getValue(100);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream2 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream2.flush();
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream2);
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream6 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture5);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream7.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream9 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream9.flush();
        posterOutputStream7.writeTo((java.io.OutputStream) posterOutputStream9);
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream13 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream7, httpCapture12);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream14 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray15 = posterOutputStream14.toByteArray();
        byte[] byteArray16 = posterOutputStream14.toByteArray();
        httpCaptureOutputStream13.write(byteArray16);
        httpCaptureOutputStream6.write(byteArray16);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        long long11 = httpsURLConnectionImpl3.getHeaderFieldDate("hi!", (long) 206);
        httpsURLConnectionImpl3.setUseCaches(true);
        java.lang.String str14 = httpsURLConnectionImpl3.getContentType();
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setFixedLengthStreamingMode((long) 503);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Chunked encoding streaming mode set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 206L + "'", long11 == 206L);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getExpected();
        com.quakearts.rest.client.net.ProgressSource.State state14 = progressEvent12.getState();
        java.lang.Object obj15 = progressEvent12.getSource();
        long long16 = progressEvent12.getProgress();
        long long17 = progressEvent12.getProgress();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(state14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300L + "'", long16 == 300L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300L + "'", long17 == 300L);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor2 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        progressMonitor2.registerSource(progressSource5);
        progressMonitor0.unregisterSource(progressSource5);
        com.quakearts.rest.client.net.ProgressListener progressListener9 = null;
        progressMonitor0.removeProgressListener(progressListener9);
        java.io.InputStream inputStream11 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture12 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream13 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture12);
        com.quakearts.rest.client.net.HttpCapture httpCapture14 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream15 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream11, httpCapture14);
        java.net.URL uRL16 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource18 = new com.quakearts.rest.client.net.ProgressSource(uRL16, "");
        long long19 = progressSource18.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream21 = new com.quakearts.rest.client.net.MeteredStream(inputStream11, progressSource18, (long) (byte) 1);
        progressMonitor0.updateProgress(progressSource18);
        java.net.URL uRL23 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource25 = new com.quakearts.rest.client.net.ProgressSource(uRL23, "");
        progressMonitor0.updateProgress(progressSource25);
        com.quakearts.rest.client.net.ProgressListener progressListener27 = null;
        progressMonitor0.removeProgressListener(progressListener27);
        com.quakearts.rest.client.net.ProgressListener progressListener29 = null;
        progressMonitor0.removeProgressListener(progressListener29);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentEncoding();
        boolean boolean13 = httpsURLConnectionImpl3.getDefaultUseCaches();
        boolean boolean14 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setUseCaches(true);
        java.io.InputStream inputStream17 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture18 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream19 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream17, httpCapture18);
        com.quakearts.rest.client.net.HttpCapture httpCapture20 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream21 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream17, httpCapture20);
        java.net.URL uRL22 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(uRL22, "");
        long long25 = progressSource24.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream27 = new com.quakearts.rest.client.net.MeteredStream(inputStream17, progressSource24, (long) (byte) 1);
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        progressSource30.close();
        boolean boolean32 = progressSource30.connected();
        progressSource30.finishTracking();
        java.net.URL uRL34 = null;
        com.quakearts.rest.client.net.ProgressSource.State state37 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent40 = new com.quakearts.rest.client.net.ProgressEvent(progressSource30, uRL34, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state37, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource41 = new com.quakearts.rest.client.net.ProgressSource(progressSource30);
        com.quakearts.rest.client.net.MeteredStream meteredStream43 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream27, progressSource30, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor44 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL45 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource47 = new com.quakearts.rest.client.net.ProgressSource(uRL45, "");
        long long48 = progressSource47.getExpected();
        progressMonitor44.registerSource(progressSource47);
        java.lang.String str50 = progressSource47.toString();
        com.quakearts.rest.client.net.HttpClient httpClient52 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream53 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream27, progressSource47, (long) 203, httpClient52);
        com.quakearts.rest.client.net.HttpClient httpClient54 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader55 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str57 = messageHeader55.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream58 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream27, httpClient54, messageHeader55);
        boolean boolean59 = httpsURLConnectionImpl3.equals((java.lang.Object) chunkedInputStream58);
        int int62 = httpsURLConnectionImpl3.getHeaderFieldInt("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]", 415);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str50, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 415 + "'", int62 == 415);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream4.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream7 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream4, httpCapture6);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream8 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray9 = posterOutputStream8.toByteArray();
        httpCaptureOutputStream7.write(byteArray9);
        httpCaptureOutputStream3.write(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream3.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setConnectTimeout((int) ' ');
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.setIfModifiedSince(100L);
        httpsURLConnectionImpl6.setDefaultUseCaches(false);
        boolean boolean16 = httpsURLConnectionImpl6.getDoOutput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = httpsURLConnectionImpl6.getRequestProperties();
        httpsURLConnectionImpl6.setRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
        httpsURLConnectionImpl6.setAllowUserInteraction(false);
        httpsURLConnectionImpl6.setDoOutput(true);
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        httpsURLConnectionImpl3.setUseCaches(true);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(412);
        long long10 = httpsURLConnectionImpl3.getHeaderFieldDate("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", 100L);
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = httpsURLConnectionImpl3.getResponseCode();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        httpsURLConnectionImpl3.setReadTimeout(10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getRequestProperties();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 100);
        httpsURLConnectionImpl3.setDoOutput(false);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        boolean boolean10 = httpsURLConnectionImpl3.getDoInput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getRequestProperties();
        java.lang.String str13 = httpsURLConnectionImpl3.getHeaderField("{size=10 nkeys=1  {get} }");
        boolean boolean14 = httpsURLConnectionImpl3.usingProxy();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        boolean boolean13 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.disconnect();
        int int8 = httpsURLConnectionImpl3.getConnectTimeout();
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.net.URL uRL11 = httpsURLConnectionImpl3.getURL();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = httpsURLConnectionImpl3.getHeaderFieldDate("\310", (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(uRL11);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(404);
        java.lang.String str41 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) keepAliveStream36);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.setReadTimeout(415);
        long long14 = httpsURLConnectionImpl6.getIfModifiedSince();
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream4 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream4.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream7 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream4, httpCapture6);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream8 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray9 = posterOutputStream8.toByteArray();
        httpCaptureOutputStream7.write(byteArray9);
        httpCaptureOutputStream3.write(byteArray9);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream12 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray13 = posterOutputStream12.toByteArray();
        httpCaptureOutputStream3.write(byteArray13);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream15 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream15.reset();
        posterOutputStream15.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream18 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray19 = posterOutputStream18.toByteArray();
        byte[] byteArray20 = posterOutputStream18.toByteArray();
        posterOutputStream15.write(byteArray20);
        byte[] byteArray22 = posterOutputStream15.toByteArray();
        httpCaptureOutputStream3.write(byteArray22);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor.setDefault(progressMonitor0);
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList3 = progressMonitor0.getProgressSources();
        java.net.URL uRL4 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource6 = new com.quakearts.rest.client.net.ProgressSource(uRL4, "");
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(progressSource6);
        progressMonitor0.updateProgress(progressSource6);
        progressSource6.updateProgress((long) 415, 100L);
        progressSource6.close();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(progressSourceList3);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.net.URL uRL15 = null;
        java.net.Proxy proxy16 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler19 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl20 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL15, proxy16, httpHandler19);
        int int21 = httpURLConnectionImpl20.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState22 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl20.setTunnelState(tunnelState22);
        boolean boolean24 = httpURLConnectionImpl20.streaming();
        java.io.InputStream inputStream25 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream26 = httpURLConnectionImpl20.getErrorStream();
        java.io.InputStream inputStream27 = httpURLConnectionImpl20.getErrorStream();
        boolean boolean28 = httpURLConnectionImpl20.usingProxy();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState29 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE;
        httpURLConnectionImpl20.setTunnelState(tunnelState29);
        httpURLConnectionImpl5.setTunnelState(tunnelState29);
        httpURLConnectionImpl5.setInstanceFollowRedirects(false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream34 = httpURLConnectionImpl5.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState22 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState22.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputStream25);
        org.junit.Assert.assertNull(inputStream26);
        org.junit.Assert.assertNull(inputStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + tunnelState29 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE + "'", tunnelState29.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.NONE));
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.HttpClient httpClient27 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader28 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream29 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture30 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream31 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream29, httpCapture30);
        com.quakearts.rest.client.net.HttpCapture httpCapture32 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream33 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream29, httpCapture32);
        messageHeader28.parseHeader(inputStream29);
        java.io.InputStream inputStream35 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture36 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream37 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream35, httpCapture36);
        com.quakearts.rest.client.net.HttpCapture httpCapture38 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream39 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream35, httpCapture38);
        java.net.URL uRL40 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource42 = new com.quakearts.rest.client.net.ProgressSource(uRL40, "");
        long long43 = progressSource42.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream45 = new com.quakearts.rest.client.net.MeteredStream(inputStream35, progressSource42, (long) (byte) 1);
        messageHeader28.parseHeader(inputStream35);
        java.lang.String str48 = messageHeader28.getValue(409);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient27, messageHeader28);
        java.lang.String str50 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) chunkedInputStream49);
        com.quakearts.rest.client.net.HttpClient httpClient51 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader52 = new com.quakearts.rest.client.net.MessageHeader();
        messageHeader52.set("content/unknown", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.io.InputStream inputStream56 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture57 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream58 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream56, httpCapture57);
        messageHeader52.parseHeader(inputStream56);
        java.lang.String str61 = messageHeader52.findValue("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        java.lang.String str63 = messageHeader52.getKey(204);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream64 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) chunkedInputStream49, httpClient51, messageHeader52);
        boolean boolean65 = chunkedInputStream64.hurry();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        messageHeader1.set("content/unknown", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        messageHeader1.parseHeader(inputStream5);
        java.lang.String str10 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        java.lang.String[] strArray21 = new java.lang.String[] { "GET", "{size=10 nkeys=1  {hi!} }", "GET", "AuthenticationHeader: prefer null", "{size=10 nkeys=1  {get} }", "", "", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "content/unknown", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader24 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader1, (java.util.Set<java.lang.String>) strSet22);
        java.io.InputStream inputStream25 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture26 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream27 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream25, httpCapture26);
        com.quakearts.rest.client.net.HttpCapture httpCapture28 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream29 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream25, httpCapture28);
        java.net.URL uRL30 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource32 = new com.quakearts.rest.client.net.ProgressSource(uRL30, "");
        long long33 = progressSource32.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream35 = new com.quakearts.rest.client.net.MeteredStream(inputStream25, progressSource32, (long) (byte) 1);
        java.net.URL uRL36 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource38 = new com.quakearts.rest.client.net.ProgressSource(uRL36, "");
        progressSource38.close();
        boolean boolean40 = progressSource38.connected();
        progressSource38.finishTracking();
        java.net.URL uRL42 = null;
        com.quakearts.rest.client.net.ProgressSource.State state45 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent48 = new com.quakearts.rest.client.net.ProgressEvent(progressSource38, uRL42, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state45, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource49 = new com.quakearts.rest.client.net.ProgressSource(progressSource38);
        com.quakearts.rest.client.net.MeteredStream meteredStream51 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream35, progressSource38, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor52 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL53 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource55 = new com.quakearts.rest.client.net.ProgressSource(uRL53, "");
        long long56 = progressSource55.getExpected();
        progressMonitor52.registerSource(progressSource55);
        java.lang.String str58 = progressSource55.toString();
        com.quakearts.rest.client.net.HttpClient httpClient60 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream61 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream35, progressSource55, (long) 203, httpClient60);
        com.quakearts.rest.client.net.HttpClient httpClient62 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader63 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str65 = messageHeader63.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream66 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream35, httpClient62, messageHeader63);
        boolean boolean67 = chunkedInputStream66.hurry();
        boolean boolean68 = chunkedInputStream66.markSupported();
        java.lang.String str69 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) chunkedInputStream66);
        // The following exception was thrown during execution in test generation
        try {
            messageHeader1.parseHeader((java.io.InputStream) chunkedInputStream66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str58, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        java.net.URL uRL17 = httpsURLConnectionImpl5.getURL();
        java.lang.Object obj18 = null;
        boolean boolean19 = httpsURLConnectionImpl5.equals(obj18);
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertNull(uRL17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getExpected();
        com.quakearts.rest.client.net.ProgressSource.State state14 = progressEvent12.getState();
        java.lang.Object obj15 = progressEvent12.getSource();
        java.lang.String str16 = progressEvent12.toString();
        java.lang.Object obj17 = progressEvent12.getSource();
        long long18 = progressEvent12.getExpected();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(state14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]" + "'", str16, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.io.InputStream inputStream15 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean16 = httpURLConnectionImpl5.usingProxy();
        httpURLConnectionImpl5.setReadTimeout((int) '#');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNull(inputStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setUseCaches(false);
        java.lang.String str8 = httpsURLConnectionImpl3.getRequestMethod();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = httpsURLConnectionImpl3.getHeaderFieldInt("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", 407);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNull(uRL9);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor.setDefault(progressMonitor0);
        java.util.List<com.quakearts.rest.client.net.ProgressSource> progressSourceList3 = progressMonitor0.getProgressSources();
        java.net.URL uRL4 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource6 = new com.quakearts.rest.client.net.ProgressSource(uRL4, "");
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(progressSource6);
        progressMonitor0.updateProgress(progressSource6);
        progressSource6.updateProgress((long) 415, 100L);
        progressSource6.finishTracking();
        progressSource6.setContentType("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(progressSourceList3);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "{size=10 nkeys=1  {hi!} }");
        java.lang.String str3 = progressSource2.getContentType();
        java.lang.String str4 = progressSource2.getMethod();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "content/unknown" + "'", str3, "content/unknown");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{size=10 nkeys=1  {hi!} }" + "'", str4, "{size=10 nkeys=1  {hi!} }");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressSource progressSource27 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        java.lang.String str28 = progressSource13.toString();
        long long29 = progressSource13.getExpected();
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]" + "'", str28, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        java.lang.String str13 = httpsURLConnectionImpl3.getContentType();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        posterOutputStream0.write(200);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream6 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream6.reset();
        posterOutputStream6.flush();
        posterOutputStream6.write(8192);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream11 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream11.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream13 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream13.flush();
        posterOutputStream11.writeTo((java.io.OutputStream) posterOutputStream13);
        com.quakearts.rest.client.net.HttpCapture httpCapture16 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream17 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream11, httpCapture16);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream18 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray19 = posterOutputStream18.toByteArray();
        byte[] byteArray20 = posterOutputStream18.toByteArray();
        httpCaptureOutputStream17.write(byteArray20);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream22 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray23 = posterOutputStream22.toByteArray();
        httpCaptureOutputStream17.write(byteArray23);
        posterOutputStream6.write(byteArray23);
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream6);
        java.lang.String str27 = posterOutputStream0.toString();
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\310" + "'", str27, "\310");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark((int) (short) 100);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream41 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream41.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture43 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream44 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream41, httpCapture43);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream45 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream45.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture47 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream48 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream45, httpCapture47);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream49 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray50 = posterOutputStream49.toByteArray();
        httpCaptureOutputStream48.write(byteArray50);
        httpCaptureOutputStream44.write(byteArray50);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream53 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray54 = posterOutputStream53.toByteArray();
        httpCaptureOutputStream44.write(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = keepAliveStream36.read(byteArray54, 402, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        int int11 = httpURLConnectionImpl5.getReadTimeout();
        httpURLConnectionImpl5.setConnectTimeout(412);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        java.lang.String str5 = messageHeader1.getValue((int) (byte) -1);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader6 = new com.quakearts.rest.client.net.http.AuthenticationHeader("{size=10 nkeys=1  {hi!} }", messageHeader1);
        messageHeader1.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null");
        java.lang.String str10 = messageHeader1.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.lang.String str1 = com.quakearts.rest.client.net.NetProperties.get("GET");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        httpsURLConnectionImpl3.setConnectTimeout(501);
        boolean boolean13 = httpsURLConnectionImpl3.getDoOutput();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = httpURLConnectionImpl5.getContentType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        posterOutputStream0.flush();
        posterOutputStream0.write(8192);
        java.lang.String str5 = posterOutputStream0.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000" + "'", str5, "\000");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("p4");
        // The following exception was thrown during execution in test generation
        try {
            com.quakearts.rest.client.net.HeaderParser headerParser4 = headerParser1.subsequence(405, 303);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid start or end");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        com.quakearts.rest.client.net.MessageHeader messageHeader16 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str18 = messageHeader16.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader16.set(406, "content/unknown", "hi!");
        messageHeader16.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader39 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader16, (java.util.Set<java.lang.String>) strSet37);
        httpURLConnectionImpl5.authObj((java.lang.Object) "");
        httpURLConnectionImpl5.setRequestProperty("", "{size=10 nkeys=1  {hi!} }");
        httpURLConnectionImpl5.setConnectTimeout(407);
        httpURLConnectionImpl5.setReadTimeout((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream48 = httpURLConnectionImpl5.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getExpected();
        com.quakearts.rest.client.net.ProgressSource.State state14 = progressEvent12.getState();
        java.lang.String str15 = progressEvent12.toString();
        long long16 = progressEvent12.getExpected();
        java.lang.String str17 = progressEvent12.getContentType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(state14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]" + "'", str15, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str17, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int1 = progressMonitor0.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor2 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        progressMonitor2.registerSource(progressSource5);
        progressMonitor0.updateProgress(progressSource5);
        progressSource5.beginTracking();
        com.quakearts.rest.client.net.ProgressSource.State state10 = progressSource5.getState();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state10.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpClient httpClient42 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader43 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str45 = messageHeader43.getValue(503);
        messageHeader43.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient42, messageHeader43);
        com.quakearts.rest.client.net.HttpCapture httpCapture50 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream51 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) meteredStream10, httpCapture50);
        com.quakearts.rest.client.net.HttpCapture httpCapture52 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream53 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) httpCaptureInputStream51, httpCapture52);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = httpCaptureInputStream51.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.addRequestProperty("", "hi!");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor14 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int15 = progressMonitor14.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor16 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource19 = new com.quakearts.rest.client.net.ProgressSource(uRL17, "");
        long long20 = progressSource19.getExpected();
        progressMonitor16.registerSource(progressSource19);
        progressMonitor14.updateProgress(progressSource19);
        progressSource19.beginTracking();
        long long24 = progressSource19.getProgress();
        httpURLConnectionImpl5.authObj((java.lang.Object) progressSource19);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = httpURLConnectionImpl5.getHeaderFieldInt("\000", (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        boolean boolean8 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.setReadTimeout(414);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = httpsURLConnectionImpl3.getHeaderFieldKey((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        java.net.URL uRL6 = null;
        java.net.Proxy proxy7 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler8 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl9 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL6, proxy7, httpsHandler8);
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = httpsURLConnectionImpl9.getHostnameVerifier();
        boolean boolean11 = httpsURLConnectionImpl9.getDoInput();
        httpsURLConnectionImpl9.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream14 = httpsURLConnectionImpl9.getErrorStream();
        java.net.URL uRL15 = httpsURLConnectionImpl9.getURL();
        boolean boolean16 = httpsURLConnectionImpl9.getDoInput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = httpsURLConnectionImpl9.getRequestProperties();
        httpURLConnectionImpl5.authObj((java.lang.Object) httpsURLConnectionImpl9);
        java.net.URL uRL19 = httpsURLConnectionImpl9.getURL();
        java.lang.String str20 = httpsURLConnectionImpl9.getContentEncoding();
        org.junit.Assert.assertNotNull(hostnameVerifier10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(inputStream14);
        org.junit.Assert.assertNull(uRL15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(uRL19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.disconnect();
        int int8 = httpsURLConnectionImpl3.getConnectTimeout();
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.net.URL uRL11 = httpsURLConnectionImpl3.getURL();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode((long) 303);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(uRL11);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        com.quakearts.rest.client.net.http.AuthCacheImpl authCacheImpl0 = new com.quakearts.rest.client.net.http.AuthCacheImpl();
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue3 = authCacheImpl0.get("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue6 = authCacheImpl0.get("hi!", "");
        com.quakearts.rest.client.net.http.AuthCacheValue authCacheValue8 = null;
        authCacheImpl0.remove("", authCacheValue8);
        org.junit.Assert.assertNull(authCacheValue3);
        org.junit.Assert.assertNull(authCacheValue6);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        long long4 = progressSource2.getExpected();
        progressSource2.finishTracking();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        keepAliveStream36.mark(205);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = keepAliveStream36.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        boolean boolean4 = httpsURLConnectionImpl3.getAllowUserInteraction();
        java.lang.String str5 = httpsURLConnectionImpl3.toString();
        java.lang.String str7 = httpsURLConnectionImpl3.getRequestProperty("hi!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str5, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        httpsURLConnectionImpl3.setUseCaches(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout(415);
        httpsURLConnectionImpl3.setDoInput(true);
        org.junit.Assert.assertNotNull(hostnameVerifier6);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        java.lang.String str39 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) keepAliveStream36);
        com.quakearts.rest.client.net.HttpCapture httpCapture40 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream41 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) keepAliveStream36, httpCapture40);
        boolean boolean42 = httpCaptureInputStream41.markSupported();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(401);
        keepAliveStream36.mark(300);
        boolean boolean42 = keepAliveStream36.markSupported();
        boolean boolean43 = keepAliveStream36.markSupported();
        boolean boolean44 = keepAliveStream36.markSupported();
        boolean boolean45 = keepAliveStream36.markSupported();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        java.lang.String str3 = headerParser1.findKey(305);
        int int6 = headerParser1.findInt("hi!", 32);
        java.lang.String str8 = headerParser1.findValue(406);
        java.lang.String str11 = headerParser1.findValue("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {get} }");
        java.util.Iterator<java.lang.String> strItor12 = headerParser1.values();
        java.lang.String str14 = headerParser1.findValue(0);
        java.util.Iterator<java.lang.String> strItor15 = headerParser1.values();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{size=10 nkeys=1  {get} }" + "'", str11, "{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strItor15);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream1 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream3 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream1, httpCapture2);
        com.quakearts.rest.client.net.HttpCapture httpCapture4 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream5 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream1, httpCapture4);
        messageHeader0.parseHeader(inputStream1);
        java.io.PrintStream printStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            messageHeader0.print(printStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        boolean boolean9 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.disconnect();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getHeaderFields();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream1 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream3 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream1, httpCapture2);
        com.quakearts.rest.client.net.HttpCapture httpCapture4 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream5 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream1, httpCapture4);
        messageHeader0.parseHeader(inputStream1);
        java.io.InputStream inputStream7 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream9 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream7, httpCapture8);
        com.quakearts.rest.client.net.HttpCapture httpCapture10 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream11 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream7, httpCapture10);
        java.net.URL uRL12 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource14 = new com.quakearts.rest.client.net.ProgressSource(uRL12, "");
        long long15 = progressSource14.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream17 = new com.quakearts.rest.client.net.MeteredStream(inputStream7, progressSource14, (long) (byte) 1);
        messageHeader0.parseHeader(inputStream7);
        java.lang.String str20 = messageHeader0.getValue(409);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = messageHeader0.getHeaders();
        messageHeader0.set("AuthenticationHeader: prefer null", "{size=10 nkeys=1  {get} }");
        messageHeader0.setIfNotSet("\u2018", "p4");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        boolean boolean38 = keepAliveStream36.markSupported();
        keepAliveStream36.mark((int) (short) 100);
        boolean boolean41 = keepAliveStream36.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = keepAliveStream36.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        java.net.URL uRL4 = null;
        java.net.Proxy proxy5 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler8 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl9 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL4, proxy5, httpHandler8);
        int int10 = httpURLConnectionImpl9.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState11 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl9.setTunnelState(tunnelState11);
        boolean boolean13 = httpURLConnectionImpl9.streaming();
        boolean boolean14 = httpURLConnectionImpl9.streaming();
        httpURLConnectionImpl9.setReadTimeout(414);
        java.io.InputStream inputStream17 = httpURLConnectionImpl9.getErrorStream();
        // The following exception was thrown during execution in test generation
        try {
            com.quakearts.rest.client.net.HttpClient httpClient18 = com.quakearts.rest.client.net.HttpClient.createNew(uRL0, proxy1, 201, true, httpURLConnectionImpl9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState11 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState11.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputStream17);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray1 = posterOutputStream0.toByteArray();
        java.lang.String str3 = posterOutputStream0.toString(0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        boolean boolean6 = httpURLConnectionImpl5.usingProxy();
        httpURLConnectionImpl5.setDoInput(false);
        java.io.InputStream inputStream9 = httpURLConnectionImpl5.getErrorStream();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputStream9);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        long long4 = progressSource3.getExpected();
        progressMonitor0.registerSource(progressSource3);
        java.lang.String str6 = progressSource3.toString();
        java.net.URL uRL7 = null;
        java.net.URL uRL10 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource12 = new com.quakearts.rest.client.net.ProgressSource(uRL10, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.net.URL uRL13 = null;
        com.quakearts.rest.client.net.ProgressSource.State state16 = com.quakearts.rest.client.net.ProgressSource.State.UPDATE;
        com.quakearts.rest.client.net.ProgressEvent progressEvent19 = new com.quakearts.rest.client.net.ProgressEvent(progressSource12, uRL13, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state16, (long) 501, (long) 304);
        java.net.URL uRL20 = null;
        com.quakearts.rest.client.net.ProgressSource.State state23 = com.quakearts.rest.client.net.ProgressSource.State.NEW;
        com.quakearts.rest.client.net.ProgressEvent progressEvent26 = new com.quakearts.rest.client.net.ProgressEvent(progressSource12, uRL20, "hi!", "GET", state23, 1L, (long) 408);
        com.quakearts.rest.client.net.ProgressEvent progressEvent29 = new com.quakearts.rest.client.net.ProgressEvent(progressSource3, uRL7, "content/unknown", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state23, (long) 504, (long) (byte) 100);
        java.lang.String str30 = progressEvent29.getMethod();
        java.lang.String str31 = progressEvent29.getMethod();
        java.lang.String str32 = progressEvent29.getMethod();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str6, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.UPDATE + "'", state16.equals(com.quakearts.rest.client.net.ProgressSource.State.UPDATE));
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state23.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "content/unknown" + "'", str30, "content/unknown");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "content/unknown" + "'", str31, "content/unknown");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "content/unknown" + "'", str32, "content/unknown");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        boolean boolean4 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setDoOutput(false);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = httpsURLConnectionImpl3.getExpiration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        java.net.URL uRL6 = null;
        java.net.Proxy proxy7 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler8 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl9 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL6, proxy7, httpsHandler8);
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = httpsURLConnectionImpl9.getHostnameVerifier();
        boolean boolean11 = httpsURLConnectionImpl9.getDoInput();
        httpsURLConnectionImpl9.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream14 = httpsURLConnectionImpl9.getErrorStream();
        java.net.URL uRL15 = httpsURLConnectionImpl9.getURL();
        boolean boolean16 = httpsURLConnectionImpl9.getDoInput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = httpsURLConnectionImpl9.getRequestProperties();
        httpURLConnectionImpl5.authObj((java.lang.Object) httpsURLConnectionImpl9);
        long long19 = httpsURLConnectionImpl9.getLastModified();
        httpsURLConnectionImpl9.setAllowUserInteraction(false);
        httpsURLConnectionImpl9.setFixedLengthStreamingMode(0);
        org.junit.Assert.assertNotNull(hostnameVerifier10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(inputStream14);
        org.junit.Assert.assertNull(uRL15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        long long11 = httpsURLConnectionImpl3.getLastModified();
        httpsURLConnectionImpl3.setDoInput(true);
        httpsURLConnectionImpl3.setDoOutput(false);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setFixedLengthStreamingMode((long) 415);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Chunked encoding streaming mode set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        boolean boolean37 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(401);
        keepAliveStream36.mark(300);
        boolean boolean42 = keepAliveStream36.markSupported();
        boolean boolean43 = keepAliveStream36.markSupported();
        keepAliveStream36.mark(401);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        int int4 = headerParser1.findInt("com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null", 404);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 404 + "'", int4 == 404);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        java.lang.String str37 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) keepAliveStream36);
        // The following exception was thrown during execution in test generation
        try {
            keepAliveStream36.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.io.PrintStream printStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.quakearts.rest.client.net.ChunkedOutputStream chunkedOutputStream2 = new com.quakearts.rest.client.net.ChunkedOutputStream(printStream0, 301);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long12 = httpsURLConnectionImpl6.getLastModified();
        httpsURLConnectionImpl6.setAllowUserInteraction(false);
        long long15 = httpsURLConnectionImpl6.getContentLengthLong();
        java.lang.String str17 = httpsURLConnectionImpl6.getHeaderField((int) '#');
        httpsURLConnectionImpl6.setDoOutput(false);
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        com.quakearts.rest.client.net.URLConnectionImpl.setProxiedHost("\310");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpClient httpClient42 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader43 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str45 = messageHeader43.getValue(503);
        messageHeader43.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient42, messageHeader43);
        java.lang.String str50 = java.net.URLConnection.guessContentTypeFromStream((java.io.InputStream) chunkedInputStream49);
        com.quakearts.rest.client.net.HttpCapture httpCapture51 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream52 = new com.quakearts.rest.client.net.HttpCaptureInputStream((java.io.InputStream) chunkedInputStream49, httpCapture51);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.Boolean boolean1 = com.quakearts.rest.client.net.NetProperties.getBoolean("p4");
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        int int12 = httpsURLConnectionImpl3.getHeaderFieldInt("GET", 403);
        java.lang.String str14 = httpsURLConnectionImpl3.getHeaderFieldKey((int) (short) 0);
        com.quakearts.rest.client.net.MessageHeader messageHeader15 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str17 = messageHeader15.getValue(503);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = messageHeader15.getHeaders();
        messageHeader15.set("{size=10 nkeys=1  {hi!} }", "content/unknown");
        java.lang.Class<?> wildcardClass22 = messageHeader15.getClass();
        java.net.URL uRL23 = null;
        java.net.Proxy proxy24 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler25 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl26 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL23, proxy24, httpsHandler25);
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = httpsURLConnectionImpl26.getHostnameVerifier();
        boolean boolean28 = httpsURLConnectionImpl26.getDoInput();
        httpsURLConnectionImpl26.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl26.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl26.setIfModifiedSince(0L);
        java.lang.Class<?> wildcardClass35 = httpsURLConnectionImpl26.getClass();
        java.net.URL uRL36 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource38 = new com.quakearts.rest.client.net.ProgressSource(uRL36, "");
        boolean boolean39 = progressSource38.connected();
        progressSource38.beginTracking();
        java.lang.Class<?> wildcardClass41 = progressSource38.getClass();
        java.net.URL uRL42 = null;
        java.net.Proxy proxy43 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler46 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl47 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL42, proxy43, httpHandler46);
        int int48 = httpURLConnectionImpl47.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState49 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl47.setTunnelState(tunnelState49);
        boolean boolean51 = httpURLConnectionImpl47.streaming();
        boolean boolean52 = httpURLConnectionImpl47.streaming();
        java.lang.Class<?> wildcardClass53 = httpURLConnectionImpl47.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass22, wildcardClass35, wildcardClass41, wildcardClass53 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = httpsURLConnectionImpl3.getContent(classArray54);
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 403 + "'", int12 == 403);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(hostnameVerifier27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState49 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState49.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader0.set(406, "content/unknown", "hi!");
        messageHeader0.set("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.flush();
        posterOutputStream0.write(204);
        com.quakearts.rest.client.net.HttpCapture httpCapture4 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream5 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture4);
        posterOutputStream0.flush();
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(progressSource2);
        progressSource3.beginTracking();
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        byte[] byteArray2 = posterOutputStream0.toByteArray();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream3 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream3.flush();
        posterOutputStream3.write(204);
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream3);
        java.lang.String str8 = posterOutputStream3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\314" + "'", str8, "\314");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setChunkedStreamingMode(205);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Fixed length streaming mode set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        httpsURLConnectionImpl3.setConnectTimeout(501);
        httpsURLConnectionImpl3.setChunkedStreamingMode(501);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = httpsURLConnectionImpl3.getResponseCode();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        com.quakearts.rest.client.net.MessageHeader messageHeader16 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str18 = messageHeader16.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader16.set(406, "content/unknown", "hi!");
        messageHeader16.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader39 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader16, (java.util.Set<java.lang.String>) strSet37);
        httpURLConnectionImpl5.authObj((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.doTunneling();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource.State state6 = com.quakearts.rest.client.net.ProgressSource.State.UPDATE;
        com.quakearts.rest.client.net.ProgressEvent progressEvent9 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL3, "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", state6, (long) 501, (long) 304);
        java.net.URL uRL10 = null;
        com.quakearts.rest.client.net.ProgressSource.State state13 = com.quakearts.rest.client.net.ProgressSource.State.NEW;
        com.quakearts.rest.client.net.ProgressEvent progressEvent16 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL10, "hi!", "GET", state13, 1L, (long) 408);
        java.net.URL uRL17 = progressEvent16.getURL();
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.UPDATE + "'", state6.equals(com.quakearts.rest.client.net.ProgressSource.State.UPDATE));
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state13.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
        org.junit.Assert.assertNull(uRL17);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.net.URL uRL0 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource2 = new com.quakearts.rest.client.net.ProgressSource(uRL0, "");
        progressSource2.close();
        boolean boolean4 = progressSource2.connected();
        progressSource2.finishTracking();
        java.net.URL uRL6 = null;
        com.quakearts.rest.client.net.ProgressSource.State state9 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent12 = new com.quakearts.rest.client.net.ProgressEvent(progressSource2, uRL6, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state9, (long) 300, (-1L));
        long long13 = progressEvent12.getExpected();
        long long14 = progressEvent12.getProgress();
        com.quakearts.rest.client.net.ProgressSource.State state15 = progressEvent12.getState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300L + "'", long14 == 300L);
        org.junit.Assert.assertNull(state15);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.addRequestProperty("", "hi!");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor14 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int15 = progressMonitor14.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor16 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource19 = new com.quakearts.rest.client.net.ProgressSource(uRL17, "");
        long long20 = progressSource19.getExpected();
        progressMonitor16.registerSource(progressSource19);
        progressMonitor14.updateProgress(progressSource19);
        progressSource19.beginTracking();
        long long24 = progressSource19.getProgress();
        httpURLConnectionImpl5.authObj((java.lang.Object) progressSource19);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream26 = httpURLConnectionImpl5.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getHeaderFields();
        boolean boolean12 = httpsURLConnectionImpl3.getDefaultUseCaches();
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.setRequestMethod("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: connect in progress");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        int int9 = httpsURLConnectionImpl3.getConnectTimeout();
        java.io.InputStream inputStream10 = httpsURLConnectionImpl3.getErrorStream();
        java.lang.String str12 = httpsURLConnectionImpl3.getHeaderField("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        httpsURLConnectionImpl3.setInstanceFollowRedirects(false);
        boolean boolean13 = httpsURLConnectionImpl3.getDefaultUseCaches();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.URI uRI1 = null;
        java.net.URL uRL2 = null;
        java.net.Proxy proxy3 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler4 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl5 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL2, proxy3, httpsHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = httpsURLConnectionImpl5.getHostnameVerifier();
        boolean boolean7 = httpsURLConnectionImpl5.getDoInput();
        httpsURLConnectionImpl5.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl5.addRequestProperty("", "hi!");
        int int15 = httpsURLConnectionImpl5.getHeaderFieldInt("hi!", 100);
        java.net.CacheRequest cacheRequest16 = responseCacheImpl0.put(uRI1, (java.net.URLConnection) httpsURLConnectionImpl5);
        httpsURLConnectionImpl5.setUseCaches(false);
        long long21 = httpsURLConnectionImpl5.getHeaderFieldLong("", (long) 304);
        java.io.InputStream inputStream22 = httpsURLConnectionImpl5.getErrorStream();
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(cacheRequest16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 304L + "'", long21 == 304L);
        org.junit.Assert.assertNull(inputStream22);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        boolean boolean1 = com.quakearts.rest.client.net.IPAddressUtil.isIPv6LiteralAddress("AuthenticationHeader: prefer null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.lang.String str1 = java.net.URLConnection.getDefaultRequestProperty("GET");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        httpsURLConnectionImpl3.setAllowUserInteraction(true);
        long long11 = httpsURLConnectionImpl3.getDate();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        boolean boolean10 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.disconnect();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = httpsURLConnectionImpl3.getResponseCode();
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        java.io.InputStream inputStream13 = httpsURLConnectionImpl3.getErrorStream();
        java.lang.String str14 = httpsURLConnectionImpl3.getRequestMethod();
        java.lang.String str15 = httpsURLConnectionImpl3.getContentEncoding();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.addRequestProperty("", "hi!");
        int int13 = httpsURLConnectionImpl3.getHeaderFieldInt("hi!", 100);
        java.lang.String str14 = httpsURLConnectionImpl3.getRequestMethod();
        java.lang.String str15 = httpsURLConnectionImpl3.toString();
        int int18 = httpsURLConnectionImpl3.getHeaderFieldInt("", 412);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str15, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 412 + "'", int18 == 412);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        long long10 = httpsURLConnectionImpl3.getHeaderFieldDate("AuthenticationHeader: prefer null", (long) 203);
        long long11 = httpsURLConnectionImpl3.getExpiration();
        int int12 = httpsURLConnectionImpl3.getContentLength();
        long long13 = httpsURLConnectionImpl3.getDate();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 203L + "'", long10 == 203L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        com.quakearts.rest.client.net.KeepAliveCache keepAliveCache0 = new com.quakearts.rest.client.net.KeepAliveCache();
        java.lang.Object obj1 = keepAliveCache0.clone();
        java.net.URL uRL2 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource4 = new com.quakearts.rest.client.net.ProgressSource(uRL2, "");
        boolean boolean5 = progressSource4.connected();
        boolean boolean6 = keepAliveCache0.containsValue((java.lang.Object) boolean5);
        com.quakearts.rest.client.net.https.HostnameChecker hostnameChecker8 = com.quakearts.rest.client.net.https.HostnameChecker.getInstance((byte) 2);
        boolean boolean9 = keepAliveCache0.containsValue((java.lang.Object) hostnameChecker8);
        java.security.cert.X509Certificate x509Certificate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            hostnameChecker8.match("{}", x509Certificate11, true);
            org.junit.Assert.fail("Expected exception of type java.security.cert.CertificateException; message: Illegal given domain name: {}");
        } catch (java.security.cert.CertificateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(hostnameChecker8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        long long4 = progressSource3.getExpected();
        progressMonitor0.registerSource(progressSource3);
        com.quakearts.rest.client.net.ProgressListener progressListener6 = null;
        progressMonitor0.addProgressListener(progressListener6);
        java.net.URL uRL8 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource10 = new com.quakearts.rest.client.net.ProgressSource(uRL8, "");
        long long11 = progressSource10.getProgress();
        progressSource10.setContentType("AuthenticationHeader: prefer null");
        java.net.URL uRL14 = progressSource10.getURL();
        progressMonitor0.unregisterSource(progressSource10);
        java.net.URL uRL16 = progressSource10.getURL();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(uRL14);
        org.junit.Assert.assertNull(uRL16);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        javax.net.ssl.HostnameVerifier hostnameVerifier0 = javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier();
        javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier0);
        org.junit.Assert.assertNotNull(hostnameVerifier0);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream0 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream0.reset();
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream3 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream0, httpCapture2);
        posterOutputStream0.write(200);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream6 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream6.reset();
        posterOutputStream6.flush();
        posterOutputStream6.write(8192);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream11 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream11.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream13 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream13.flush();
        posterOutputStream11.writeTo((java.io.OutputStream) posterOutputStream13);
        com.quakearts.rest.client.net.HttpCapture httpCapture16 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream17 = new com.quakearts.rest.client.net.HttpCaptureOutputStream((java.io.OutputStream) posterOutputStream11, httpCapture16);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream18 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray19 = posterOutputStream18.toByteArray();
        byte[] byteArray20 = posterOutputStream18.toByteArray();
        httpCaptureOutputStream17.write(byteArray20);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream22 = new com.quakearts.rest.client.net.PosterOutputStream();
        byte[] byteArray23 = posterOutputStream22.toByteArray();
        httpCaptureOutputStream17.write(byteArray23);
        posterOutputStream6.write(byteArray23);
        posterOutputStream0.writeTo((java.io.OutputStream) posterOutputStream6);
        posterOutputStream6.reset();
        posterOutputStream6.close();
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        httpURLConnectionImpl5.setReadTimeout(206);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = httpURLConnectionImpl5.getHeaderFields();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertNull(inputStream12);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getAllowUserInteraction();
        httpsURLConnectionImpl3.disconnect();
        long long8 = httpsURLConnectionImpl3.getIfModifiedSince();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(uRL9);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(100);
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        java.lang.String str12 = httpsURLConnectionImpl3.getContentType();
        long long13 = httpsURLConnectionImpl3.getDate();
        java.io.InputStream inputStream14 = httpsURLConnectionImpl3.getErrorStream();
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.addRequestProperty("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(inputStream14);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        java.net.URL uRL3 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource5 = new com.quakearts.rest.client.net.ProgressSource(uRL3, "");
        long long6 = progressSource5.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream8 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource5, (long) (short) 0);
        progressSource5.setContentType("AuthenticationHeader: prefer null");
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor14 = new com.quakearts.rest.client.net.ProgressMonitor();
        int int15 = progressMonitor14.getProgressUpdateThreshold();
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor16 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource19 = new com.quakearts.rest.client.net.ProgressSource(uRL17, "");
        long long20 = progressSource19.getExpected();
        progressMonitor16.registerSource(progressSource19);
        progressMonitor14.unregisterSource(progressSource19);
        java.lang.String str23 = progressSource19.toString();
        com.quakearts.rest.client.net.ProgressSource.State state24 = progressSource19.getState();
        com.quakearts.rest.client.net.ProgressEvent progressEvent27 = new com.quakearts.rest.client.net.ProgressEvent(progressSource5, uRL11, "", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", state24, 115L, 0L);
        progressSource5.beginTracking();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str23, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + com.quakearts.rest.client.net.ProgressSource.State.NEW + "'", state24.equals(com.quakearts.rest.client.net.ProgressSource.State.NEW));
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str2 = messageHeader0.getValue(503);
        messageHeader0.add("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String str7 = messageHeader0.getValue((int) 'a');
        messageHeader0.prepend("com.quakearts.rest.client.net.http.HttpURLConnectionImpl:null", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        messageHeader1.set("content/unknown", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        messageHeader1.parseHeader(inputStream5);
        java.lang.String str10 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]");
        java.lang.String[] strArray21 = new java.lang.String[] { "GET", "{size=10 nkeys=1  {hi!} }", "GET", "AuthenticationHeader: prefer null", "{size=10 nkeys=1  {get} }", "", "", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "content/unknown", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader24 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader1, (java.util.Set<java.lang.String>) strSet22);
        messageHeader1.set((int) 'p', "com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]", "\000");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.io.OutputStream outputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream2 = new com.quakearts.rest.client.net.HttpCaptureOutputStream(outputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureOutputStream httpCaptureOutputStream4 = new com.quakearts.rest.client.net.HttpCaptureOutputStream(outputStream0, httpCapture3);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream5 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream5.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream7.flush();
        posterOutputStream5.writeTo((java.io.OutputStream) posterOutputStream7);
        posterOutputStream5.write(401);
        posterOutputStream5.flush();
        byte[] byteArray13 = posterOutputStream5.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            httpCaptureOutputStream4.write(byteArray13, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-111]");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader4 = new com.quakearts.rest.client.net.http.AuthenticationHeader("{size=10 nkeys=1  {hi!} }", messageHeader1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream1 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture2 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream3 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream1, httpCapture2);
        com.quakearts.rest.client.net.HttpCapture httpCapture4 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream5 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream1, httpCapture4);
        messageHeader0.parseHeader(inputStream1);
        messageHeader0.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor11 = messageHeader0.multiValueIterator("");
        messageHeader0.add("GET", "GET");
        java.lang.String str16 = messageHeader0.getValue(404);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        java.io.InputStream inputStream11 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean12 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream13 = httpURLConnectionImpl5.getErrorStream();
        java.net.CookieHandler cookieHandler14 = httpURLConnectionImpl5.getCookieHandler();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = httpURLConnectionImpl5.getRequestProperties();
        boolean boolean16 = httpURLConnectionImpl5.usingProxy();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputStream13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        int int10 = httpURLConnectionImpl5.getReadTimeout();
        boolean boolean11 = httpURLConnectionImpl5.usingProxy();
        boolean boolean12 = httpURLConnectionImpl5.getDefaultUseCaches();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = httpURLConnectionImpl5.getHeaderFieldKey(410);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        com.quakearts.rest.client.net.HttpClient httpClient42 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader43 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str45 = messageHeader43.getValue(503);
        messageHeader43.prepend("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {hi!} }");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream49 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient42, messageHeader43);
        java.io.PrintStream printStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            messageHeader43.print(printStream50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor0 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL1 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource3 = new com.quakearts.rest.client.net.ProgressSource(uRL1, "");
        boolean boolean4 = progressSource3.connected();
        boolean boolean5 = progressSource3.connected();
        progressMonitor0.registerSource(progressSource3);
        int int7 = progressMonitor0.getProgressUpdateThreshold();
        java.net.URL uRL8 = null;
        boolean boolean10 = progressMonitor0.shouldMeterInput(uRL8, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        boolean boolean9 = httpsURLConnectionImpl3.getAllowUserInteraction();
        boolean boolean10 = httpsURLConnectionImpl3.usingProxy();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.net.FileNameMap fileNameMap0 = java.net.URLConnection.getFileNameMap();
        java.net.URLConnection.setFileNameMap(fileNameMap0);
        java.net.URLConnection.setFileNameMap(fileNameMap0);
        java.net.URLConnection.setFileNameMap(fileNameMap0);
        java.net.URLConnection.setFileNameMap(fileNameMap0);
        org.junit.Assert.assertNotNull(fileNameMap0);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        int int11 = httpURLConnectionImpl5.getConnectTimeout();
        java.io.InputStream inputStream12 = httpURLConnectionImpl5.getErrorStream();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState13 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState13);
        httpURLConnectionImpl5.setConnectTimeout((int) 'a');
        httpURLConnectionImpl5.setRequestProperty("", "\u2018");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(inputStream12);
        org.junit.Assert.assertTrue("'" + tunnelState13 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState13.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(401);
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(10);
        int int12 = httpsURLConnectionImpl3.getHeaderFieldInt("GET", 403);
        java.lang.String str14 = httpsURLConnectionImpl3.getHeaderFieldKey((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            httpsURLConnectionImpl3.addRequestProperty("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", "{size=10 nkeys=1  {hi!} }");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 403 + "'", int12 == 403);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setFixedLengthStreamingMode(0L);
        java.io.InputStream inputStream8 = httpsURLConnectionImpl3.getErrorStream();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        boolean boolean10 = httpsURLConnectionImpl3.getDoInput();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getRequestProperties();
        long long12 = httpsURLConnectionImpl3.getIfModifiedSince();
        java.lang.String str14 = httpsURLConnectionImpl3.getRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=UPDATE, content-type=content/unknown, progress=0, expected=32]");
        long long17 = httpsURLConnectionImpl3.getHeaderFieldLong("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", (long) (short) 10);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(inputStream8);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream2 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream2, httpCapture3);
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream6 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream2, httpCapture5);
        messageHeader1.parseHeader(inputStream2);
        messageHeader1.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor12 = messageHeader1.multiValueIterator("");
        messageHeader1.add("GET", "GET");
        java.lang.String[] strArray20 = new java.lang.String[] { "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "", "content/unknown", "{size=10 nkeys=1  {hi!} }" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = messageHeader1.getHeaders(strArray20);
        messageHeader1.remove("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader24 = new com.quakearts.rest.client.net.http.AuthenticationHeader("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", messageHeader1);
        java.lang.String str25 = authenticationHeader24.raw();
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.ProgressSource progressSource34 = new com.quakearts.rest.client.net.ProgressSource(progressSource30);
        com.quakearts.rest.client.net.HttpClient httpClient36 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream37 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream26, progressSource34, (long) 303, httpClient36);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = keepAliveStream37.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        java.io.InputStream inputStream10 = httpURLConnectionImpl5.getErrorStream();
        boolean boolean11 = httpURLConnectionImpl5.getDoOutput();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = httpURLConnectionImpl5.getContentEncoding();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        java.net.URL uRL13 = httpURLConnectionImpl5.getURL();
        java.net.URL uRL14 = null;
        java.net.Proxy proxy15 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler18 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl19 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL14, proxy15, httpHandler18);
        int int20 = httpURLConnectionImpl19.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState21 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl19.setTunnelState(tunnelState21);
        boolean boolean23 = httpURLConnectionImpl19.streaming();
        java.net.URL uRL24 = null;
        java.net.Proxy proxy25 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler28 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl29 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL24, proxy25, httpHandler28);
        int int30 = httpURLConnectionImpl29.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState31 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl29.setTunnelState(tunnelState31);
        httpURLConnectionImpl19.setTunnelState(tunnelState31);
        httpURLConnectionImpl5.setTunnelState(tunnelState31);
        boolean boolean35 = httpURLConnectionImpl5.streaming();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(uRL13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState21 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState21.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState31 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState31.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setUseCaches(false);
        boolean boolean8 = httpsURLConnectionImpl3.getDoOutput();
        boolean boolean9 = httpsURLConnectionImpl3.getDefaultUseCaches();
        java.io.InputStream inputStream10 = httpsURLConnectionImpl3.getErrorStream();
        httpsURLConnectionImpl3.setIfModifiedSince((long) 305);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(inputStream10);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        keepAliveStream36.mark(502);
        keepAliveStream36.mark((int) (byte) 2);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.getValue(503);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = messageHeader1.getHeaders();
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader5 = new com.quakearts.rest.client.net.http.AuthenticationHeader("content/unknown", messageHeader1);
        com.quakearts.rest.client.net.HeaderParser headerParser6 = authenticationHeader5.headerParser();
        java.lang.String str7 = authenticationHeader5.scheme();
        java.lang.String str8 = authenticationHeader5.scheme();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(headerParser6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        httpsURLConnectionImpl3.setDefaultUseCaches(false);
        java.lang.String str14 = httpsURLConnectionImpl3.getHeaderField(201);
        httpsURLConnectionImpl3.setDoOutput(true);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader1.set(406, "content/unknown", "hi!");
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader8 = new com.quakearts.rest.client.net.http.AuthenticationHeader("content/unknown", messageHeader1);
        java.lang.String str10 = messageHeader1.getValue(0);
        java.lang.String str12 = messageHeader1.getValue(8192);
        int int14 = messageHeader1.getKey("{}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setChunkedStreamingMode(408);
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) 10);
        httpsURLConnectionImpl3.setDefaultUseCaches(false);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        boolean boolean6 = httpsURLConnectionImpl3.getInstanceFollowRedirects();
        httpsURLConnectionImpl3.setChunkedStreamingMode(10);
        java.lang.String str10 = httpsURLConnectionImpl3.getHeaderFieldKey(402);
        boolean boolean11 = httpsURLConnectionImpl3.getUseCaches();
        java.lang.String str13 = httpsURLConnectionImpl3.getHeaderField(403);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setAllowUserInteraction(false);
        boolean boolean7 = httpsURLConnectionImpl3.getDefaultUseCaches();
        httpsURLConnectionImpl3.disconnect();
        httpsURLConnectionImpl3.setIfModifiedSince(0L);
        boolean boolean11 = httpsURLConnectionImpl3.getAllowUserInteraction();
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str3 = messageHeader1.getValue(503);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = messageHeader1.getHeaders();
        messageHeader1.set("{size=10 nkeys=1  {hi!} }", "content/unknown");
        java.lang.String str9 = messageHeader1.getValue(0);
        com.quakearts.rest.client.net.MessageHeader messageHeader11 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str13 = messageHeader11.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader11.set(406, "content/unknown", "hi!");
        messageHeader11.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader34 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader11, (java.util.Set<java.lang.String>) strSet32);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader35 = new com.quakearts.rest.client.net.http.AuthenticationHeader("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", messageHeader1, (java.util.Set<java.lang.String>) strSet32);
        messageHeader1.set("{size=10 nkeys=1  {get} }", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "content/unknown" + "'", str9, "content/unknown");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = httpsURLConnectionImpl3.getHostnameVerifier();
        httpsURLConnectionImpl3.setConnectTimeout((int) ' ');
        java.lang.String str8 = httpsURLConnectionImpl3.toString();
        httpsURLConnectionImpl3.setChunkedStreamingMode((int) (byte) -1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = httpsURLConnectionImpl3.getRequestProperties();
        // The following exception was thrown during execution in test generation
        try {
            java.security.Principal principal12 = httpsURLConnectionImpl3.getPeerPrincipal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: connection not yet open");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertNotNull(hostnameVerifier5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null" + "'", str8, "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream5 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream5.flush();
        com.quakearts.rest.client.net.PosterOutputStream posterOutputStream7 = new com.quakearts.rest.client.net.PosterOutputStream();
        posterOutputStream7.flush();
        posterOutputStream5.writeTo((java.io.OutputStream) posterOutputStream7);
        posterOutputStream5.write(401);
        posterOutputStream5.flush();
        byte[] byteArray13 = posterOutputStream5.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = httpCaptureInputStream4.read(byteArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-111]");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        httpsURLConnectionImpl6.setReadTimeout(415);
        httpsURLConnectionImpl6.setAllowUserInteraction(true);
        boolean boolean16 = httpsURLConnectionImpl6.getDefaultUseCaches();
        long long19 = httpsURLConnectionImpl6.getHeaderFieldLong("com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", (long) (-1));
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        com.quakearts.rest.client.net.MessageHeader messageHeader1 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream2 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream2, httpCapture3);
        com.quakearts.rest.client.net.HttpCapture httpCapture5 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream6 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream2, httpCapture5);
        messageHeader1.parseHeader(inputStream2);
        java.io.InputStream inputStream8 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture9 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream10 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream8, httpCapture9);
        com.quakearts.rest.client.net.HttpCapture httpCapture11 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream12 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream8, httpCapture11);
        java.net.URL uRL13 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource15 = new com.quakearts.rest.client.net.ProgressSource(uRL13, "");
        long long16 = progressSource15.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream18 = new com.quakearts.rest.client.net.MeteredStream(inputStream8, progressSource15, (long) (byte) 1);
        messageHeader1.parseHeader(inputStream8);
        java.lang.String str21 = messageHeader1.getValue(409);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = messageHeader1.getHeaders();
        messageHeader1.reset();
        messageHeader1.remove("GET");
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader26 = new com.quakearts.rest.client.net.http.AuthenticationHeader("com.quakearts.rest.client.net.ProgressEvent[url=null, method=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], state=UPDATE, content-type=com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1], progress=501, expected=304]", messageHeader1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        com.quakearts.rest.client.net.MessageHeader messageHeader16 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str18 = messageHeader16.findValue("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader16.set(406, "content/unknown", "hi!");
        messageHeader16.prepend("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "{size=10 nkeys=1  {hi!} }", "GET", "{size=10 nkeys=1  {get} }", "{size=10 nkeys=1  {hi!} }", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]", "AuthenticationHeader: prefer null", "AuthenticationHeader: prefer null", "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!", "{size=10 nkeys=1  {hi!} }" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.quakearts.rest.client.net.http.AuthenticationHeader authenticationHeader39 = new com.quakearts.rest.client.net.http.AuthenticationHeader("", messageHeader16, (java.util.Set<java.lang.String>) strSet37);
        httpURLConnectionImpl5.authObj((java.lang.Object) "");
        httpURLConnectionImpl5.setRequestProperty("", "{size=10 nkeys=1  {hi!} }");
        httpURLConnectionImpl5.setConnectTimeout(407);
        httpURLConnectionImpl5.setRequestProperty("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=CONNECTED, content-type=content/unknown, progress=0, expected=-1]", "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=DELETE, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpClient httpClient3 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader4 = new com.quakearts.rest.client.net.MessageHeader();
        java.io.InputStream inputStream5 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture6 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream7 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture6);
        com.quakearts.rest.client.net.HttpCapture httpCapture8 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream9 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream5, httpCapture8);
        messageHeader4.parseHeader(inputStream5);
        messageHeader4.add("GET", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null");
        java.util.Iterator<java.lang.String> strItor15 = messageHeader4.multiValueIterator("");
        messageHeader4.add("GET", "GET");
        java.lang.String[] strArray23 = new java.lang.String[] { "com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "", "content/unknown", "{size=10 nkeys=1  {hi!} }" };
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = messageHeader4.getHeaders(strArray23);
        messageHeader4.remove("com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        messageHeader4.add("com.quakearts.rest.client.net.ProgressEvent[url=null, method=hi!, state=null, content-type=com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null, progress=300, expected=-1]", "hi!");
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream30 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) httpCaptureInputStream2, httpClient3, messageHeader4);
        boolean boolean31 = chunkedInputStream30.hurry();
        // The following exception was thrown during execution in test generation
        try {
            chunkedInputStream30.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        com.quakearts.rest.client.net.MessageHeader messageHeader0 = new com.quakearts.rest.client.net.MessageHeader();
        messageHeader0.set((int) (short) 10, "{size=10 nkeys=1  {get} }", "\314");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        com.quakearts.rest.client.net.http.ResponseCacheImpl responseCacheImpl0 = new com.quakearts.rest.client.net.http.ResponseCacheImpl();
        java.net.ResponseCache.setDefault((java.net.ResponseCache) responseCacheImpl0);
        java.net.URI uRI2 = null;
        java.net.URL uRL3 = null;
        java.net.Proxy proxy4 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler5 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl6 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL3, proxy4, httpsHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = httpsURLConnectionImpl6.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = httpsURLConnectionImpl6.getHostnameVerifier();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode(401);
        java.net.CacheRequest cacheRequest11 = responseCacheImpl0.put(uRI2, (java.net.URLConnection) httpsURLConnectionImpl6);
        long long12 = httpsURLConnectionImpl6.getLastModified();
        httpsURLConnectionImpl6.setFixedLengthStreamingMode((long) '4');
        long long15 = httpsURLConnectionImpl6.getContentLengthLong();
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(hostnameVerifier8);
        org.junit.Assert.assertNull(cacheRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.http.HttpHandler httpHandler4 = new com.quakearts.rest.client.net.http.HttpHandler("", (int) (short) -1);
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl httpURLConnectionImpl5 = new com.quakearts.rest.client.net.http.HttpURLConnectionImpl(uRL0, proxy1, httpHandler4);
        int int6 = httpURLConnectionImpl5.getReadTimeout();
        com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState tunnelState7 = com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP;
        httpURLConnectionImpl5.setTunnelState(tunnelState7);
        boolean boolean9 = httpURLConnectionImpl5.streaming();
        boolean boolean10 = httpURLConnectionImpl5.streaming();
        httpURLConnectionImpl5.setReadTimeout(414);
        httpURLConnectionImpl5.setDefaultUseCaches(false);
        // The following exception was thrown during execution in test generation
        try {
            httpURLConnectionImpl5.setRequestMethod("\314");
            org.junit.Assert.fail("Expected exception of type java.net.ProtocolException; message: Invalid HTTP method: I?");
        } catch (java.net.ProtocolException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + tunnelState7 + "' != '" + com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP + "'", tunnelState7.equals(com.quakearts.rest.client.net.http.HttpURLConnectionImpl.TunnelState.SETUP));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.lang.String str1 = com.quakearts.rest.client.net.MessageHeader.canonicalID("{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{size=10 nkeys=1  {get} }" + "'", str1, "{size=10 nkeys=1  {get} }");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        com.quakearts.rest.client.net.HeaderParser headerParser1 = new com.quakearts.rest.client.net.HeaderParser("hi!");
        java.lang.String str3 = headerParser1.findKey(305);
        int int6 = headerParser1.findInt("hi!", 32);
        java.lang.String str8 = headerParser1.findValue(406);
        java.lang.String str11 = headerParser1.findValue("{size=10 nkeys=1  {hi!} }", "{size=10 nkeys=1  {get} }");
        java.util.Iterator<java.lang.String> strItor12 = headerParser1.values();
        java.lang.String str14 = headerParser1.findValue(0);
        java.util.Iterator<java.lang.String> strItor15 = headerParser1.keys();
        java.lang.String str17 = headerParser1.findValue("AuthenticationHeader: prefer null");
        java.lang.Class<?> wildcardClass18 = headerParser1.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{size=10 nkeys=1  {get} }" + "'", str11, "{size=10 nkeys=1  {get} }");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.io.InputStream inputStream0 = null;
        com.quakearts.rest.client.net.HttpCapture httpCapture1 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream2 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture1);
        com.quakearts.rest.client.net.HttpCapture httpCapture3 = null;
        com.quakearts.rest.client.net.HttpCaptureInputStream httpCaptureInputStream4 = new com.quakearts.rest.client.net.HttpCaptureInputStream(inputStream0, httpCapture3);
        java.net.URL uRL5 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource7 = new com.quakearts.rest.client.net.ProgressSource(uRL5, "");
        long long8 = progressSource7.getExpected();
        com.quakearts.rest.client.net.MeteredStream meteredStream10 = new com.quakearts.rest.client.net.MeteredStream(inputStream0, progressSource7, (long) (byte) 1);
        java.net.URL uRL11 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource13 = new com.quakearts.rest.client.net.ProgressSource(uRL11, "");
        progressSource13.close();
        boolean boolean15 = progressSource13.connected();
        progressSource13.finishTracking();
        java.net.URL uRL17 = null;
        com.quakearts.rest.client.net.ProgressSource.State state20 = null;
        com.quakearts.rest.client.net.ProgressEvent progressEvent23 = new com.quakearts.rest.client.net.ProgressEvent(progressSource13, uRL17, "hi!", "com.quakearts.rest.client.net.https.DelegateHttpsURLConnection:null", state20, (long) 300, (-1L));
        com.quakearts.rest.client.net.ProgressSource progressSource24 = new com.quakearts.rest.client.net.ProgressSource(progressSource13);
        com.quakearts.rest.client.net.MeteredStream meteredStream26 = new com.quakearts.rest.client.net.MeteredStream((java.io.InputStream) meteredStream10, progressSource13, (long) 32);
        com.quakearts.rest.client.net.ProgressMonitor progressMonitor27 = new com.quakearts.rest.client.net.ProgressMonitor();
        java.net.URL uRL28 = null;
        com.quakearts.rest.client.net.ProgressSource progressSource30 = new com.quakearts.rest.client.net.ProgressSource(uRL28, "");
        long long31 = progressSource30.getExpected();
        progressMonitor27.registerSource(progressSource30);
        java.lang.String str33 = progressSource30.toString();
        com.quakearts.rest.client.net.HttpClient httpClient35 = null;
        com.quakearts.rest.client.net.KeepAliveStream keepAliveStream36 = new com.quakearts.rest.client.net.KeepAliveStream((java.io.InputStream) meteredStream10, progressSource30, (long) 203, httpClient35);
        com.quakearts.rest.client.net.HttpClient httpClient37 = null;
        com.quakearts.rest.client.net.MessageHeader messageHeader38 = new com.quakearts.rest.client.net.MessageHeader();
        java.lang.String str40 = messageHeader38.getValue(503);
        com.quakearts.rest.client.net.ChunkedInputStream chunkedInputStream41 = new com.quakearts.rest.client.net.ChunkedInputStream((java.io.InputStream) meteredStream10, httpClient37, messageHeader38);
        boolean boolean42 = chunkedInputStream41.hurry();
        long long44 = chunkedInputStream41.skip((long) (short) 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]" + "'", str33, "com.quakearts.rest.client.net.ProgressSource[url=null, method=, state=NEW, content-type=content/unknown, progress=0, expected=-1]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.net.URL uRL0 = null;
        java.net.Proxy proxy1 = null;
        com.quakearts.rest.client.net.https.HttpsHandler httpsHandler2 = null;
        com.quakearts.rest.client.net.https.HttpsURLConnectionImpl httpsURLConnectionImpl3 = new com.quakearts.rest.client.net.https.HttpsURLConnectionImpl(uRL0, proxy1, httpsHandler2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = httpsURLConnectionImpl3.getHostnameVerifier();
        boolean boolean5 = httpsURLConnectionImpl3.getDoInput();
        httpsURLConnectionImpl3.setUseCaches(false);
        java.lang.String str8 = httpsURLConnectionImpl3.getRequestMethod();
        java.net.URL uRL9 = httpsURLConnectionImpl3.getURL();
        httpsURLConnectionImpl3.setDefaultUseCaches(true);
        httpsURLConnectionImpl3.setInstanceFollowRedirects(true);
        org.junit.Assert.assertNotNull(hostnameVerifier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNull(uRL9);
    }
}
